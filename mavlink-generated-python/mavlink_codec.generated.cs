

/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;
using System.Collections;
using System.Collections.Generic;
    
namespace MavLink
{
    public static class MavlinkSettings
    {
		public const string WireProtocolVersion = "1.0";
		public const byte ProtocolMarker = 0xfe;
		public const bool CrcExtra = true;
		public const bool IsLittleEndian = true;
    }
    
    public delegate MavlinkMessage MavlinkPacketDeserializeFunc(byte[] bytes, int offset);

    //returns the message ID, offset is advanced by the number of bytes used to serialize
    public delegate int MavlinkPacketSerializeFunc(byte[] bytes, ref int offset, object mavlinkPacket);
 
    public class MavPacketInfo
    {
        public MavlinkPacketDeserializeFunc Deserializer;
        public int [] OrderMap;
        public byte CrcExtra;

         public MavPacketInfo(MavlinkPacketDeserializeFunc deserializer, byte crcExtra)
         {
             this.Deserializer = deserializer;
             this.CrcExtra = crcExtra;
         }
    }
 
    public static class MavLinkSerializer
    {
        public static void SetDataIsLittleEndian(bool isLittle)
        {
            bitconverter.SetDataIsLittleEndian(isLittle);
        }
    
        private static readonly FrameworkBitConverter bitconverter = new FrameworkBitConverter(); 
    
        public static Dictionary<int, MavPacketInfo> Lookup = new Dictionary<int, MavPacketInfo>
        {
			{150, new MavPacketInfo(Deserialize_SENSOR_OFFSETS, 134)},
			{151, new MavPacketInfo(Deserialize_SET_MAG_OFFSETS, 219)},
			{152, new MavPacketInfo(Deserialize_MEMINFO, 208)},
			{153, new MavPacketInfo(Deserialize_AP_ADC, 188)},
			{154, new MavPacketInfo(Deserialize_DIGICAM_CONFIGURE, 84)},
			{155, new MavPacketInfo(Deserialize_DIGICAM_CONTROL, 22)},
			{156, new MavPacketInfo(Deserialize_MOUNT_CONFIGURE, 19)},
			{157, new MavPacketInfo(Deserialize_MOUNT_CONTROL, 21)},
			{158, new MavPacketInfo(Deserialize_MOUNT_STATUS, 134)},
			{160, new MavPacketInfo(Deserialize_FENCE_POINT, 78)},
			{161, new MavPacketInfo(Deserialize_FENCE_FETCH_POINT, 68)},
			{162, new MavPacketInfo(Deserialize_FENCE_STATUS, 189)},
			{163, new MavPacketInfo(Deserialize_AHRS, 127)},
			{164, new MavPacketInfo(Deserialize_SIMSTATE, 154)},
			{165, new MavPacketInfo(Deserialize_HWSTATUS, 21)},
			{166, new MavPacketInfo(Deserialize_RADIO, 21)},
			{167, new MavPacketInfo(Deserialize_LIMITS_STATUS, 144)},
			{168, new MavPacketInfo(Deserialize_WIND, 1)},
			{169, new MavPacketInfo(Deserialize_DATA16, 234)},
			{170, new MavPacketInfo(Deserialize_DATA32, 73)},
			{171, new MavPacketInfo(Deserialize_DATA64, 181)},
			{172, new MavPacketInfo(Deserialize_DATA96, 22)},
			{173, new MavPacketInfo(Deserialize_RANGEFINDER, 83)},
			{174, new MavPacketInfo(Deserialize_AIRSPEED_AUTOCAL, 167)},
			{175, new MavPacketInfo(Deserialize_RALLY_POINT, 138)},
			{176, new MavPacketInfo(Deserialize_RALLY_FETCH_POINT, 234)},
			{0, new MavPacketInfo(Deserialize_HEARTBEAT, 50)},
			{1, new MavPacketInfo(Deserialize_SYS_STATUS, 124)},
			{2, new MavPacketInfo(Deserialize_SYSTEM_TIME, 137)},
			{4, new MavPacketInfo(Deserialize_PING, 237)},
			{5, new MavPacketInfo(Deserialize_CHANGE_OPERATOR_CONTROL, 217)},
			{6, new MavPacketInfo(Deserialize_CHANGE_OPERATOR_CONTROL_ACK, 104)},
			{7, new MavPacketInfo(Deserialize_AUTH_KEY, 119)},
			{11, new MavPacketInfo(Deserialize_SET_MODE, 89)},
			{20, new MavPacketInfo(Deserialize_PARAM_REQUEST_READ, 214)},
			{21, new MavPacketInfo(Deserialize_PARAM_REQUEST_LIST, 159)},
			{22, new MavPacketInfo(Deserialize_PARAM_VALUE, 220)},
			{23, new MavPacketInfo(Deserialize_PARAM_SET, 168)},
			{24, new MavPacketInfo(Deserialize_GPS_RAW_INT, 24)},
			{25, new MavPacketInfo(Deserialize_GPS_STATUS, 23)},
			{26, new MavPacketInfo(Deserialize_SCALED_IMU, 170)},
			{27, new MavPacketInfo(Deserialize_RAW_IMU, 144)},
			{28, new MavPacketInfo(Deserialize_RAW_PRESSURE, 67)},
			{29, new MavPacketInfo(Deserialize_SCALED_PRESSURE, 115)},
			{30, new MavPacketInfo(Deserialize_ATTITUDE, 39)},
			{31, new MavPacketInfo(Deserialize_ATTITUDE_QUATERNION, 246)},
			{32, new MavPacketInfo(Deserialize_LOCAL_POSITION_NED, 185)},
			{33, new MavPacketInfo(Deserialize_GLOBAL_POSITION_INT, 104)},
			{34, new MavPacketInfo(Deserialize_RC_CHANNELS_SCALED, 237)},
			{35, new MavPacketInfo(Deserialize_RC_CHANNELS_RAW, 244)},
			{36, new MavPacketInfo(Deserialize_SERVO_OUTPUT_RAW, 222)},
			{37, new MavPacketInfo(Deserialize_MISSION_REQUEST_PARTIAL_LIST, 212)},
			{38, new MavPacketInfo(Deserialize_MISSION_WRITE_PARTIAL_LIST, 9)},
			{39, new MavPacketInfo(Deserialize_MISSION_ITEM, 254)},
			{40, new MavPacketInfo(Deserialize_MISSION_REQUEST, 230)},
			{41, new MavPacketInfo(Deserialize_MISSION_SET_CURRENT, 28)},
			{42, new MavPacketInfo(Deserialize_MISSION_CURRENT, 28)},
			{43, new MavPacketInfo(Deserialize_MISSION_REQUEST_LIST, 132)},
			{44, new MavPacketInfo(Deserialize_MISSION_COUNT, 221)},
			{45, new MavPacketInfo(Deserialize_MISSION_CLEAR_ALL, 232)},
			{46, new MavPacketInfo(Deserialize_MISSION_ITEM_REACHED, 11)},
			{47, new MavPacketInfo(Deserialize_MISSION_ACK, 153)},
			{48, new MavPacketInfo(Deserialize_SET_GPS_GLOBAL_ORIGIN, 41)},
			{49, new MavPacketInfo(Deserialize_GPS_GLOBAL_ORIGIN, 39)},
			{50, new MavPacketInfo(Deserialize_SET_LOCAL_POSITION_SETPOINT, 214)},
			{51, new MavPacketInfo(Deserialize_LOCAL_POSITION_SETPOINT, 223)},
			{52, new MavPacketInfo(Deserialize_GLOBAL_POSITION_SETPOINT_INT, 141)},
			{53, new MavPacketInfo(Deserialize_SET_GLOBAL_POSITION_SETPOINT_INT, 33)},
			{54, new MavPacketInfo(Deserialize_SAFETY_SET_ALLOWED_AREA, 15)},
			{55, new MavPacketInfo(Deserialize_SAFETY_ALLOWED_AREA, 3)},
			{56, new MavPacketInfo(Deserialize_SET_ROLL_PITCH_YAW_THRUST, 100)},
			{57, new MavPacketInfo(Deserialize_SET_ROLL_PITCH_YAW_SPEED_THRUST, 24)},
			{58, new MavPacketInfo(Deserialize_ROLL_PITCH_YAW_THRUST_SETPOINT, 239)},
			{59, new MavPacketInfo(Deserialize_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, 238)},
			{60, new MavPacketInfo(Deserialize_SET_QUAD_MOTORS_SETPOINT, 30)},
			{61, new MavPacketInfo(Deserialize_SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST, 240)},
			{62, new MavPacketInfo(Deserialize_NAV_CONTROLLER_OUTPUT, 183)},
			{63, new MavPacketInfo(Deserialize_SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST, 130)},
			{64, new MavPacketInfo(Deserialize_STATE_CORRECTION, 130)},
			{66, new MavPacketInfo(Deserialize_REQUEST_DATA_STREAM, 148)},
			{67, new MavPacketInfo(Deserialize_DATA_STREAM, 21)},
			{69, new MavPacketInfo(Deserialize_MANUAL_CONTROL, 243)},
			{70, new MavPacketInfo(Deserialize_RC_CHANNELS_OVERRIDE, 124)},
			{74, new MavPacketInfo(Deserialize_VFR_HUD, 20)},
			{76, new MavPacketInfo(Deserialize_COMMAND_LONG, 152)},
			{77, new MavPacketInfo(Deserialize_COMMAND_ACK, 143)},
			{80, new MavPacketInfo(Deserialize_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, 127)},
			{81, new MavPacketInfo(Deserialize_MANUAL_SETPOINT, 106)},
			{89, new MavPacketInfo(Deserialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET, 231)},
			{90, new MavPacketInfo(Deserialize_HIL_STATE, 183)},
			{91, new MavPacketInfo(Deserialize_HIL_CONTROLS, 63)},
			{92, new MavPacketInfo(Deserialize_HIL_RC_INPUTS_RAW, 54)},
			{100, new MavPacketInfo(Deserialize_OPTICAL_FLOW, 175)},
			{101, new MavPacketInfo(Deserialize_GLOBAL_VISION_POSITION_ESTIMATE, 102)},
			{102, new MavPacketInfo(Deserialize_VISION_POSITION_ESTIMATE, 158)},
			{103, new MavPacketInfo(Deserialize_VISION_SPEED_ESTIMATE, 208)},
			{104, new MavPacketInfo(Deserialize_VICON_POSITION_ESTIMATE, 56)},
			{105, new MavPacketInfo(Deserialize_HIGHRES_IMU, 93)},
			{106, new MavPacketInfo(Deserialize_OMNIDIRECTIONAL_FLOW, 211)},
			{107, new MavPacketInfo(Deserialize_HIL_SENSOR, 108)},
			{108, new MavPacketInfo(Deserialize_SIM_STATE, 32)},
			{109, new MavPacketInfo(Deserialize_RADIO_STATUS, 185)},
			{110, new MavPacketInfo(Deserialize_FILE_TRANSFER_START, 128)},
			{111, new MavPacketInfo(Deserialize_FILE_TRANSFER_DIR_LIST, 68)},
			{112, new MavPacketInfo(Deserialize_FILE_TRANSFER_RES, 124)},
			{113, new MavPacketInfo(Deserialize_HIL_GPS, 124)},
			{114, new MavPacketInfo(Deserialize_HIL_OPTICAL_FLOW, 119)},
			{115, new MavPacketInfo(Deserialize_HIL_STATE_QUATERNION, 4)},
			{147, new MavPacketInfo(Deserialize_BATTERY_STATUS, 177)},
			{148, new MavPacketInfo(Deserialize_SETPOINT_8DOF, 241)},
			{149, new MavPacketInfo(Deserialize_SETPOINT_6DOF, 15)},
			{249, new MavPacketInfo(Deserialize_MEMORY_VECT, 204)},
			{250, new MavPacketInfo(Deserialize_DEBUG_VECT, 49)},
			{251, new MavPacketInfo(Deserialize_NAMED_VALUE_FLOAT, 170)},
			{252, new MavPacketInfo(Deserialize_NAMED_VALUE_INT, 44)},
			{253, new MavPacketInfo(Deserialize_STATUSTEXT, 83)},
			{254, new MavPacketInfo(Deserialize_DEBUG, 46)},
		};

		internal static MavlinkMessage Deserialize_SENSOR_OFFSETS(byte[] bytes, int offset)
		{
			return new Msg_sensor_offsets
			{
				mag_declination = bitconverter.ToSingle(bytes, offset + 0),
				raw_press = bitconverter.ToInt32(bytes, offset + 4),
				raw_temp = bitconverter.ToInt32(bytes, offset + 8),
				gyro_cal_x = bitconverter.ToSingle(bytes, offset + 12),
				gyro_cal_y = bitconverter.ToSingle(bytes, offset + 16),
				gyro_cal_z = bitconverter.ToSingle(bytes, offset + 20),
				accel_cal_x = bitconverter.ToSingle(bytes, offset + 24),
				accel_cal_y = bitconverter.ToSingle(bytes, offset + 28),
				accel_cal_z = bitconverter.ToSingle(bytes, offset + 32),
				mag_ofs_x = bitconverter.ToInt16(bytes, offset + 36),
				mag_ofs_y = bitconverter.ToInt16(bytes, offset + 38),
				mag_ofs_z = bitconverter.ToInt16(bytes, offset + 40),
			};
		}

		internal static MavlinkMessage Deserialize_SET_MAG_OFFSETS(byte[] bytes, int offset)
		{
			return new Msg_set_mag_offsets
			{
				mag_ofs_x = bitconverter.ToInt16(bytes, offset + 0),
				mag_ofs_y = bitconverter.ToInt16(bytes, offset + 2),
				mag_ofs_z = bitconverter.ToInt16(bytes, offset + 4),
				target_system = bytes[offset + 6],
				target_component = bytes[offset + 7],
			};
		}

		internal static MavlinkMessage Deserialize_MEMINFO(byte[] bytes, int offset)
		{
			return new Msg_meminfo
			{
				brkval = bitconverter.ToUInt16(bytes, offset + 0),
				freemem = bitconverter.ToUInt16(bytes, offset + 2),
			};
		}

		internal static MavlinkMessage Deserialize_AP_ADC(byte[] bytes, int offset)
		{
			return new Msg_ap_adc
			{
				adc1 = bitconverter.ToUInt16(bytes, offset + 0),
				adc2 = bitconverter.ToUInt16(bytes, offset + 2),
				adc3 = bitconverter.ToUInt16(bytes, offset + 4),
				adc4 = bitconverter.ToUInt16(bytes, offset + 6),
				adc5 = bitconverter.ToUInt16(bytes, offset + 8),
				adc6 = bitconverter.ToUInt16(bytes, offset + 10),
			};
		}

		internal static MavlinkMessage Deserialize_DIGICAM_CONFIGURE(byte[] bytes, int offset)
		{
			return new Msg_digicam_configure
			{
				extra_value = bitconverter.ToSingle(bytes, offset + 0),
				shutter_speed = bitconverter.ToUInt16(bytes, offset + 4),
				target_system = bytes[offset + 6],
				target_component = bytes[offset + 7],
				mode = bytes[offset + 8],
				aperture = bytes[offset + 9],
				iso = bytes[offset + 10],
				exposure_type = bytes[offset + 11],
				command_id = bytes[offset + 12],
				engine_cut_off = bytes[offset + 13],
				extra_param = bytes[offset + 14],
			};
		}

		internal static MavlinkMessage Deserialize_DIGICAM_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_digicam_control
			{
				extra_value = bitconverter.ToSingle(bytes, offset + 0),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
				session = bytes[offset + 6],
				zoom_pos = bytes[offset + 7],
				zoom_step = bitconverter.ToInt8(bytes, offset + 8),
				focus_lock = bytes[offset + 9],
				shot = bytes[offset + 10],
				command_id = bytes[offset + 11],
				extra_param = bytes[offset + 12],
			};
		}

		internal static MavlinkMessage Deserialize_MOUNT_CONFIGURE(byte[] bytes, int offset)
		{
			return new Msg_mount_configure
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				mount_mode = bytes[offset + 2],
				stab_roll = bytes[offset + 3],
				stab_pitch = bytes[offset + 4],
				stab_yaw = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_MOUNT_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_mount_control
			{
				input_a = bitconverter.ToInt32(bytes, offset + 0),
				input_b = bitconverter.ToInt32(bytes, offset + 4),
				input_c = bitconverter.ToInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
				target_component = bytes[offset + 13],
				save_position = bytes[offset + 14],
			};
		}

		internal static MavlinkMessage Deserialize_MOUNT_STATUS(byte[] bytes, int offset)
		{
			return new Msg_mount_status
			{
				pointing_a = bitconverter.ToInt32(bytes, offset + 0),
				pointing_b = bitconverter.ToInt32(bytes, offset + 4),
				pointing_c = bitconverter.ToInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
				target_component = bytes[offset + 13],
			};
		}

		internal static MavlinkMessage Deserialize_FENCE_POINT(byte[] bytes, int offset)
		{
			return new Msg_fence_point
			{
				lat = bitconverter.ToSingle(bytes, offset + 0),
				lng = bitconverter.ToSingle(bytes, offset + 4),
				target_system = bytes[offset + 8],
				target_component = bytes[offset + 9],
				idx = bytes[offset + 10],
				count = bytes[offset + 11],
			};
		}

		internal static MavlinkMessage Deserialize_FENCE_FETCH_POINT(byte[] bytes, int offset)
		{
			return new Msg_fence_fetch_point
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				idx = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_FENCE_STATUS(byte[] bytes, int offset)
		{
			return new Msg_fence_status
			{
				breach_time = bitconverter.ToUInt32(bytes, offset + 0),
				breach_count = bitconverter.ToUInt16(bytes, offset + 4),
				breach_status = bytes[offset + 6],
				breach_type = bytes[offset + 7],
			};
		}

		internal static MavlinkMessage Deserialize_AHRS(byte[] bytes, int offset)
		{
			return new Msg_ahrs
			{
				omegaIx = bitconverter.ToSingle(bytes, offset + 0),
				omegaIy = bitconverter.ToSingle(bytes, offset + 4),
				omegaIz = bitconverter.ToSingle(bytes, offset + 8),
				accel_weight = bitconverter.ToSingle(bytes, offset + 12),
				renorm_val = bitconverter.ToSingle(bytes, offset + 16),
				error_rp = bitconverter.ToSingle(bytes, offset + 20),
				error_yaw = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_SIMSTATE(byte[] bytes, int offset)
		{
			return new Msg_simstate
			{
				roll = bitconverter.ToSingle(bytes, offset + 0),
				pitch = bitconverter.ToSingle(bytes, offset + 4),
				yaw = bitconverter.ToSingle(bytes, offset + 8),
				xacc = bitconverter.ToSingle(bytes, offset + 12),
				yacc = bitconverter.ToSingle(bytes, offset + 16),
				zacc = bitconverter.ToSingle(bytes, offset + 20),
				xgyro = bitconverter.ToSingle(bytes, offset + 24),
				ygyro = bitconverter.ToSingle(bytes, offset + 28),
				zgyro = bitconverter.ToSingle(bytes, offset + 32),
				lat = bitconverter.ToInt32(bytes, offset + 36),
				lng = bitconverter.ToInt32(bytes, offset + 40),
			};
		}

		internal static MavlinkMessage Deserialize_HWSTATUS(byte[] bytes, int offset)
		{
			return new Msg_hwstatus
			{
				Vcc = bitconverter.ToUInt16(bytes, offset + 0),
				I2Cerr = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_RADIO(byte[] bytes, int offset)
		{
			return new Msg_radio
			{
				rxerrors = bitconverter.ToUInt16(bytes, offset + 0),
				@fixed = bitconverter.ToUInt16(bytes, offset + 2),
				rssi = bytes[offset + 4],
				remrssi = bytes[offset + 5],
				txbuf = bytes[offset + 6],
				noise = bytes[offset + 7],
				remnoise = bytes[offset + 8],
			};
		}

		internal static MavlinkMessage Deserialize_LIMITS_STATUS(byte[] bytes, int offset)
		{
			return new Msg_limits_status
			{
				last_trigger = bitconverter.ToUInt32(bytes, offset + 0),
				last_action = bitconverter.ToUInt32(bytes, offset + 4),
				last_recovery = bitconverter.ToUInt32(bytes, offset + 8),
				last_clear = bitconverter.ToUInt32(bytes, offset + 12),
				breach_count = bitconverter.ToUInt16(bytes, offset + 16),
				limits_state = bytes[offset + 18],
				mods_enabled = bytes[offset + 19],
				mods_required = bytes[offset + 20],
				mods_triggered = bytes[offset + 21],
			};
		}

		internal static MavlinkMessage Deserialize_WIND(byte[] bytes, int offset)
		{
			return new Msg_wind
			{
				direction = bitconverter.ToSingle(bytes, offset + 0),
				speed = bitconverter.ToSingle(bytes, offset + 4),
				speed_z = bitconverter.ToSingle(bytes, offset + 8),
			};
		}

		internal static MavlinkMessage Deserialize_DATA16(byte[] bytes, int offset)
		{
			return new Msg_data16
			{
				type = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 16),
			};
		}

		internal static MavlinkMessage Deserialize_DATA32(byte[] bytes, int offset)
		{
			return new Msg_data32
			{
				type = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 32),
			};
		}

		internal static MavlinkMessage Deserialize_DATA64(byte[] bytes, int offset)
		{
			return new Msg_data64
			{
				type = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 64),
			};
		}

		internal static MavlinkMessage Deserialize_DATA96(byte[] bytes, int offset)
		{
			return new Msg_data96
			{
				type = bytes[offset + 0],
				len = bytes[offset + 1],
				data =  ByteArrayUtil.ToUInt8(bytes, offset + 2, 96),
			};
		}

		internal static MavlinkMessage Deserialize_RANGEFINDER(byte[] bytes, int offset)
		{
			return new Msg_rangefinder
			{
				distance = bitconverter.ToSingle(bytes, offset + 0),
				voltage = bitconverter.ToSingle(bytes, offset + 4),
			};
		}

		internal static MavlinkMessage Deserialize_AIRSPEED_AUTOCAL(byte[] bytes, int offset)
		{
			return new Msg_airspeed_autocal
			{
				vx = bitconverter.ToSingle(bytes, offset + 0),
				vy = bitconverter.ToSingle(bytes, offset + 4),
				vz = bitconverter.ToSingle(bytes, offset + 8),
				diff_pressure = bitconverter.ToSingle(bytes, offset + 12),
				EAS2TAS = bitconverter.ToSingle(bytes, offset + 16),
				ratio = bitconverter.ToSingle(bytes, offset + 20),
				state_x = bitconverter.ToSingle(bytes, offset + 24),
				state_y = bitconverter.ToSingle(bytes, offset + 28),
				state_z = bitconverter.ToSingle(bytes, offset + 32),
				Pax = bitconverter.ToSingle(bytes, offset + 36),
				Pby = bitconverter.ToSingle(bytes, offset + 40),
				Pcz = bitconverter.ToSingle(bytes, offset + 44),
			};
		}

		internal static MavlinkMessage Deserialize_RALLY_POINT(byte[] bytes, int offset)
		{
			return new Msg_rally_point
			{
				lat = bitconverter.ToInt32(bytes, offset + 0),
				lng = bitconverter.ToInt32(bytes, offset + 4),
				alt = bitconverter.ToInt16(bytes, offset + 8),
				break_alt = bitconverter.ToInt16(bytes, offset + 10),
				land_dir = bitconverter.ToUInt16(bytes, offset + 12),
				target_system = bytes[offset + 14],
				target_component = bytes[offset + 15],
				idx = bytes[offset + 16],
				count = bytes[offset + 17],
				flags = bytes[offset + 18],
			};
		}

		internal static MavlinkMessage Deserialize_RALLY_FETCH_POINT(byte[] bytes, int offset)
		{
			return new Msg_rally_fetch_point
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				idx = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_HEARTBEAT(byte[] bytes, int offset)
		{
			return new Msg_heartbeat
			{
				custom_mode = bitconverter.ToUInt32(bytes, offset + 0),
				type = bytes[offset + 4],
				autopilot = bytes[offset + 5],
				base_mode = bytes[offset + 6],
				system_status = bytes[offset + 7],
				mavlink_version = bytes[offset + 8],
			};
		}

		internal static MavlinkMessage Deserialize_SYS_STATUS(byte[] bytes, int offset)
		{
			return new Msg_sys_status
			{
				onboard_control_sensors_present = bitconverter.ToUInt32(bytes, offset + 0),
				onboard_control_sensors_enabled = bitconverter.ToUInt32(bytes, offset + 4),
				onboard_control_sensors_health = bitconverter.ToUInt32(bytes, offset + 8),
				load = bitconverter.ToUInt16(bytes, offset + 12),
				voltage_battery = bitconverter.ToUInt16(bytes, offset + 14),
				current_battery = bitconverter.ToInt16(bytes, offset + 16),
				drop_rate_comm = bitconverter.ToUInt16(bytes, offset + 18),
				errors_comm = bitconverter.ToUInt16(bytes, offset + 20),
				errors_count1 = bitconverter.ToUInt16(bytes, offset + 22),
				errors_count2 = bitconverter.ToUInt16(bytes, offset + 24),
				errors_count3 = bitconverter.ToUInt16(bytes, offset + 26),
				errors_count4 = bitconverter.ToUInt16(bytes, offset + 28),
				battery_remaining = bitconverter.ToInt8(bytes, offset + 30),
			};
		}

		internal static MavlinkMessage Deserialize_SYSTEM_TIME(byte[] bytes, int offset)
		{
			return new Msg_system_time
			{
				time_unix_usec = bitconverter.ToUInt64(bytes, offset + 0),
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 8),
			};
		}

		internal static MavlinkMessage Deserialize_PING(byte[] bytes, int offset)
		{
			return new Msg_ping
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				seq = bitconverter.ToUInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
				target_component = bytes[offset + 13],
			};
		}

		internal static MavlinkMessage Deserialize_CHANGE_OPERATOR_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_change_operator_control
			{
				target_system = bytes[offset + 0],
				control_request = bytes[offset + 1],
				version = bytes[offset + 2],
				passkey =  ByteArrayUtil.ToChar(bytes, offset + 3, 25),
			};
		}

		internal static MavlinkMessage Deserialize_CHANGE_OPERATOR_CONTROL_ACK(byte[] bytes, int offset)
		{
			return new Msg_change_operator_control_ack
			{
				gcs_system_id = bytes[offset + 0],
				control_request = bytes[offset + 1],
				ack = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_AUTH_KEY(byte[] bytes, int offset)
		{
			return new Msg_auth_key
			{
				key =  ByteArrayUtil.ToChar(bytes, offset + 0, 32),
			};
		}

		internal static MavlinkMessage Deserialize_SET_MODE(byte[] bytes, int offset)
		{
			return new Msg_set_mode
			{
				custom_mode = bitconverter.ToUInt32(bytes, offset + 0),
				target_system = bytes[offset + 4],
				base_mode = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_REQUEST_READ(byte[] bytes, int offset)
		{
			return new Msg_param_request_read
			{
				param_index = bitconverter.ToInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
				param_id =  ByteArrayUtil.ToChar(bytes, offset + 4, 16),
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_REQUEST_LIST(byte[] bytes, int offset)
		{
			return new Msg_param_request_list
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_VALUE(byte[] bytes, int offset)
		{
			return new Msg_param_value
			{
				param_value = bitconverter.ToSingle(bytes, offset + 0),
				param_count = bitconverter.ToUInt16(bytes, offset + 4),
				param_index = bitconverter.ToUInt16(bytes, offset + 6),
				param_id =  ByteArrayUtil.ToChar(bytes, offset + 8, 16),
				param_type = bytes[offset + 24],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_SET(byte[] bytes, int offset)
		{
			return new Msg_param_set
			{
				param_value = bitconverter.ToSingle(bytes, offset + 0),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
				param_id =  ByteArrayUtil.ToChar(bytes, offset + 6, 16),
				param_type = bytes[offset + 22],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_RAW_INT(byte[] bytes, int offset)
		{
			return new Msg_gps_raw_int
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 8),
				lon = bitconverter.ToInt32(bytes, offset + 12),
				alt = bitconverter.ToInt32(bytes, offset + 16),
				eph = bitconverter.ToUInt16(bytes, offset + 20),
				epv = bitconverter.ToUInt16(bytes, offset + 22),
				vel = bitconverter.ToUInt16(bytes, offset + 24),
				cog = bitconverter.ToUInt16(bytes, offset + 26),
				fix_type = bytes[offset + 28],
				satellites_visible = bytes[offset + 29],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_STATUS(byte[] bytes, int offset)
		{
			return new Msg_gps_status
			{
				satellites_visible = bytes[offset + 0],
				satellite_prn =  ByteArrayUtil.ToUInt8(bytes, offset + 1, 20),
				satellite_used =  ByteArrayUtil.ToUInt8(bytes, offset + 21, 20),
				satellite_elevation =  ByteArrayUtil.ToUInt8(bytes, offset + 41, 20),
				satellite_azimuth =  ByteArrayUtil.ToUInt8(bytes, offset + 61, 20),
				satellite_snr =  ByteArrayUtil.ToUInt8(bytes, offset + 81, 20),
			};
		}

		internal static MavlinkMessage Deserialize_SCALED_IMU(byte[] bytes, int offset)
		{
			return new Msg_scaled_imu
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				xacc = bitconverter.ToInt16(bytes, offset + 4),
				yacc = bitconverter.ToInt16(bytes, offset + 6),
				zacc = bitconverter.ToInt16(bytes, offset + 8),
				xgyro = bitconverter.ToInt16(bytes, offset + 10),
				ygyro = bitconverter.ToInt16(bytes, offset + 12),
				zgyro = bitconverter.ToInt16(bytes, offset + 14),
				xmag = bitconverter.ToInt16(bytes, offset + 16),
				ymag = bitconverter.ToInt16(bytes, offset + 18),
				zmag = bitconverter.ToInt16(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_RAW_IMU(byte[] bytes, int offset)
		{
			return new Msg_raw_imu
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				xacc = bitconverter.ToInt16(bytes, offset + 8),
				yacc = bitconverter.ToInt16(bytes, offset + 10),
				zacc = bitconverter.ToInt16(bytes, offset + 12),
				xgyro = bitconverter.ToInt16(bytes, offset + 14),
				ygyro = bitconverter.ToInt16(bytes, offset + 16),
				zgyro = bitconverter.ToInt16(bytes, offset + 18),
				xmag = bitconverter.ToInt16(bytes, offset + 20),
				ymag = bitconverter.ToInt16(bytes, offset + 22),
				zmag = bitconverter.ToInt16(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_RAW_PRESSURE(byte[] bytes, int offset)
		{
			return new Msg_raw_pressure
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				press_abs = bitconverter.ToInt16(bytes, offset + 8),
				press_diff1 = bitconverter.ToInt16(bytes, offset + 10),
				press_diff2 = bitconverter.ToInt16(bytes, offset + 12),
				temperature = bitconverter.ToInt16(bytes, offset + 14),
			};
		}

		internal static MavlinkMessage Deserialize_SCALED_PRESSURE(byte[] bytes, int offset)
		{
			return new Msg_scaled_pressure
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				press_abs = bitconverter.ToSingle(bytes, offset + 4),
				press_diff = bitconverter.ToSingle(bytes, offset + 8),
				temperature = bitconverter.ToInt16(bytes, offset + 12),
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE(byte[] bytes, int offset)
		{
			return new Msg_attitude
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 4),
				pitch = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				rollspeed = bitconverter.ToSingle(bytes, offset + 16),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 20),
				yawspeed = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE_QUATERNION(byte[] bytes, int offset)
		{
			return new Msg_attitude_quaternion
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				q1 = bitconverter.ToSingle(bytes, offset + 4),
				q2 = bitconverter.ToSingle(bytes, offset + 8),
				q3 = bitconverter.ToSingle(bytes, offset + 12),
				q4 = bitconverter.ToSingle(bytes, offset + 16),
				rollspeed = bitconverter.ToSingle(bytes, offset + 20),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 24),
				yawspeed = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_LOCAL_POSITION_NED(byte[] bytes, int offset)
		{
			return new Msg_local_position_ned
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 4),
				y = bitconverter.ToSingle(bytes, offset + 8),
				z = bitconverter.ToSingle(bytes, offset + 12),
				vx = bitconverter.ToSingle(bytes, offset + 16),
				vy = bitconverter.ToSingle(bytes, offset + 20),
				vz = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_GLOBAL_POSITION_INT(byte[] bytes, int offset)
		{
			return new Msg_global_position_int
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 4),
				lon = bitconverter.ToInt32(bytes, offset + 8),
				alt = bitconverter.ToInt32(bytes, offset + 12),
				relative_alt = bitconverter.ToInt32(bytes, offset + 16),
				vx = bitconverter.ToInt16(bytes, offset + 20),
				vy = bitconverter.ToInt16(bytes, offset + 22),
				vz = bitconverter.ToInt16(bytes, offset + 24),
				hdg = bitconverter.ToUInt16(bytes, offset + 26),
			};
		}

		internal static MavlinkMessage Deserialize_RC_CHANNELS_SCALED(byte[] bytes, int offset)
		{
			return new Msg_rc_channels_scaled
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				chan1_scaled = bitconverter.ToInt16(bytes, offset + 4),
				chan2_scaled = bitconverter.ToInt16(bytes, offset + 6),
				chan3_scaled = bitconverter.ToInt16(bytes, offset + 8),
				chan4_scaled = bitconverter.ToInt16(bytes, offset + 10),
				chan5_scaled = bitconverter.ToInt16(bytes, offset + 12),
				chan6_scaled = bitconverter.ToInt16(bytes, offset + 14),
				chan7_scaled = bitconverter.ToInt16(bytes, offset + 16),
				chan8_scaled = bitconverter.ToInt16(bytes, offset + 18),
				port = bytes[offset + 20],
				rssi = bytes[offset + 21],
			};
		}

		internal static MavlinkMessage Deserialize_RC_CHANNELS_RAW(byte[] bytes, int offset)
		{
			return new Msg_rc_channels_raw
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				chan1_raw = bitconverter.ToUInt16(bytes, offset + 4),
				chan2_raw = bitconverter.ToUInt16(bytes, offset + 6),
				chan3_raw = bitconverter.ToUInt16(bytes, offset + 8),
				chan4_raw = bitconverter.ToUInt16(bytes, offset + 10),
				chan5_raw = bitconverter.ToUInt16(bytes, offset + 12),
				chan6_raw = bitconverter.ToUInt16(bytes, offset + 14),
				chan7_raw = bitconverter.ToUInt16(bytes, offset + 16),
				chan8_raw = bitconverter.ToUInt16(bytes, offset + 18),
				port = bytes[offset + 20],
				rssi = bytes[offset + 21],
			};
		}

		internal static MavlinkMessage Deserialize_SERVO_OUTPUT_RAW(byte[] bytes, int offset)
		{
			return new Msg_servo_output_raw
			{
				time_usec = bitconverter.ToUInt32(bytes, offset + 0),
				servo1_raw = bitconverter.ToUInt16(bytes, offset + 4),
				servo2_raw = bitconverter.ToUInt16(bytes, offset + 6),
				servo3_raw = bitconverter.ToUInt16(bytes, offset + 8),
				servo4_raw = bitconverter.ToUInt16(bytes, offset + 10),
				servo5_raw = bitconverter.ToUInt16(bytes, offset + 12),
				servo6_raw = bitconverter.ToUInt16(bytes, offset + 14),
				servo7_raw = bitconverter.ToUInt16(bytes, offset + 16),
				servo8_raw = bitconverter.ToUInt16(bytes, offset + 18),
				port = bytes[offset + 20],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_REQUEST_PARTIAL_LIST(byte[] bytes, int offset)
		{
			return new Msg_mission_request_partial_list
			{
				start_index = bitconverter.ToInt16(bytes, offset + 0),
				end_index = bitconverter.ToInt16(bytes, offset + 2),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_WRITE_PARTIAL_LIST(byte[] bytes, int offset)
		{
			return new Msg_mission_write_partial_list
			{
				start_index = bitconverter.ToInt16(bytes, offset + 0),
				end_index = bitconverter.ToInt16(bytes, offset + 2),
				target_system = bytes[offset + 4],
				target_component = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_ITEM(byte[] bytes, int offset)
		{
			return new Msg_mission_item
			{
				param1 = bitconverter.ToSingle(bytes, offset + 0),
				param2 = bitconverter.ToSingle(bytes, offset + 4),
				param3 = bitconverter.ToSingle(bytes, offset + 8),
				param4 = bitconverter.ToSingle(bytes, offset + 12),
				x = bitconverter.ToSingle(bytes, offset + 16),
				y = bitconverter.ToSingle(bytes, offset + 20),
				z = bitconverter.ToSingle(bytes, offset + 24),
				seq = bitconverter.ToUInt16(bytes, offset + 28),
				command = bitconverter.ToUInt16(bytes, offset + 30),
				target_system = bytes[offset + 32],
				target_component = bytes[offset + 33],
				frame = bytes[offset + 34],
				current = bytes[offset + 35],
				autocontinue = bytes[offset + 36],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_REQUEST(byte[] bytes, int offset)
		{
			return new Msg_mission_request
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_SET_CURRENT(byte[] bytes, int offset)
		{
			return new Msg_mission_set_current
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_CURRENT(byte[] bytes, int offset)
		{
			return new Msg_mission_current
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_REQUEST_LIST(byte[] bytes, int offset)
		{
			return new Msg_mission_request_list
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_COUNT(byte[] bytes, int offset)
		{
			return new Msg_mission_count
			{
				count = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_CLEAR_ALL(byte[] bytes, int offset)
		{
			return new Msg_mission_clear_all
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_ITEM_REACHED(byte[] bytes, int offset)
		{
			return new Msg_mission_item_reached
			{
				seq = bitconverter.ToUInt16(bytes, offset + 0),
			};
		}

		internal static MavlinkMessage Deserialize_MISSION_ACK(byte[] bytes, int offset)
		{
			return new Msg_mission_ack
			{
				target_system = bytes[offset + 0],
				target_component = bytes[offset + 1],
				type = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_SET_GPS_GLOBAL_ORIGIN(byte[] bytes, int offset)
		{
			return new Msg_set_gps_global_origin
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_GLOBAL_ORIGIN(byte[] bytes, int offset)
		{
			return new Msg_gps_global_origin
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
			};
		}

		internal static MavlinkMessage Deserialize_SET_LOCAL_POSITION_SETPOINT(byte[] bytes, int offset)
		{
			return new Msg_set_local_position_setpoint
			{
				x = bitconverter.ToSingle(bytes, offset + 0),
				y = bitconverter.ToSingle(bytes, offset + 4),
				z = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				target_system = bytes[offset + 16],
				target_component = bytes[offset + 17],
				coordinate_frame = bytes[offset + 18],
			};
		}

		internal static MavlinkMessage Deserialize_LOCAL_POSITION_SETPOINT(byte[] bytes, int offset)
		{
			return new Msg_local_position_setpoint
			{
				x = bitconverter.ToSingle(bytes, offset + 0),
				y = bitconverter.ToSingle(bytes, offset + 4),
				z = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				coordinate_frame = bytes[offset + 16],
			};
		}

		internal static MavlinkMessage Deserialize_GLOBAL_POSITION_SETPOINT_INT(byte[] bytes, int offset)
		{
			return new Msg_global_position_setpoint_int
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
				yaw = bitconverter.ToInt16(bytes, offset + 12),
				coordinate_frame = bytes[offset + 14],
			};
		}

		internal static MavlinkMessage Deserialize_SET_GLOBAL_POSITION_SETPOINT_INT(byte[] bytes, int offset)
		{
			return new Msg_set_global_position_setpoint_int
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
				yaw = bitconverter.ToInt16(bytes, offset + 12),
				coordinate_frame = bytes[offset + 14],
			};
		}

		internal static MavlinkMessage Deserialize_SAFETY_SET_ALLOWED_AREA(byte[] bytes, int offset)
		{
			return new Msg_safety_set_allowed_area
			{
				p1x = bitconverter.ToSingle(bytes, offset + 0),
				p1y = bitconverter.ToSingle(bytes, offset + 4),
				p1z = bitconverter.ToSingle(bytes, offset + 8),
				p2x = bitconverter.ToSingle(bytes, offset + 12),
				p2y = bitconverter.ToSingle(bytes, offset + 16),
				p2z = bitconverter.ToSingle(bytes, offset + 20),
				target_system = bytes[offset + 24],
				target_component = bytes[offset + 25],
				frame = bytes[offset + 26],
			};
		}

		internal static MavlinkMessage Deserialize_SAFETY_ALLOWED_AREA(byte[] bytes, int offset)
		{
			return new Msg_safety_allowed_area
			{
				p1x = bitconverter.ToSingle(bytes, offset + 0),
				p1y = bitconverter.ToSingle(bytes, offset + 4),
				p1z = bitconverter.ToSingle(bytes, offset + 8),
				p2x = bitconverter.ToSingle(bytes, offset + 12),
				p2y = bitconverter.ToSingle(bytes, offset + 16),
				p2z = bitconverter.ToSingle(bytes, offset + 20),
				frame = bytes[offset + 24],
			};
		}

		internal static MavlinkMessage Deserialize_SET_ROLL_PITCH_YAW_THRUST(byte[] bytes, int offset)
		{
			return new Msg_set_roll_pitch_yaw_thrust
			{
				roll = bitconverter.ToSingle(bytes, offset + 0),
				pitch = bitconverter.ToSingle(bytes, offset + 4),
				yaw = bitconverter.ToSingle(bytes, offset + 8),
				thrust = bitconverter.ToSingle(bytes, offset + 12),
				target_system = bytes[offset + 16],
				target_component = bytes[offset + 17],
			};
		}

		internal static MavlinkMessage Deserialize_SET_ROLL_PITCH_YAW_SPEED_THRUST(byte[] bytes, int offset)
		{
			return new Msg_set_roll_pitch_yaw_speed_thrust
			{
				roll_speed = bitconverter.ToSingle(bytes, offset + 0),
				pitch_speed = bitconverter.ToSingle(bytes, offset + 4),
				yaw_speed = bitconverter.ToSingle(bytes, offset + 8),
				thrust = bitconverter.ToSingle(bytes, offset + 12),
				target_system = bytes[offset + 16],
				target_component = bytes[offset + 17],
			};
		}

		internal static MavlinkMessage Deserialize_ROLL_PITCH_YAW_THRUST_SETPOINT(byte[] bytes, int offset)
		{
			return new Msg_roll_pitch_yaw_thrust_setpoint
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 4),
				pitch = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				thrust = bitconverter.ToSingle(bytes, offset + 16),
			};
		}

		internal static MavlinkMessage Deserialize_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT(byte[] bytes, int offset)
		{
			return new Msg_roll_pitch_yaw_speed_thrust_setpoint
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll_speed = bitconverter.ToSingle(bytes, offset + 4),
				pitch_speed = bitconverter.ToSingle(bytes, offset + 8),
				yaw_speed = bitconverter.ToSingle(bytes, offset + 12),
				thrust = bitconverter.ToSingle(bytes, offset + 16),
			};
		}

		internal static MavlinkMessage Deserialize_SET_QUAD_MOTORS_SETPOINT(byte[] bytes, int offset)
		{
			return new Msg_set_quad_motors_setpoint
			{
				motor_front_nw = bitconverter.ToUInt16(bytes, offset + 0),
				motor_right_ne = bitconverter.ToUInt16(bytes, offset + 2),
				motor_back_se = bitconverter.ToUInt16(bytes, offset + 4),
				motor_left_sw = bitconverter.ToUInt16(bytes, offset + 6),
				target_system = bytes[offset + 8],
			};
		}

		internal static MavlinkMessage Deserialize_SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST(byte[] bytes, int offset)
		{
			return new Msg_set_quad_swarm_roll_pitch_yaw_thrust
			{
				roll =  ByteArrayUtil.ToInt16(bytes, offset + 0, 4),
				pitch =  ByteArrayUtil.ToInt16(bytes, offset + 4, 4),
				yaw =  ByteArrayUtil.ToInt16(bytes, offset + 8, 4),
				thrust =  ByteArrayUtil.ToUInt16(bytes, offset + 12, 4),
				group = bytes[offset + 16],
				mode = bytes[offset + 17],
			};
		}

		internal static MavlinkMessage Deserialize_NAV_CONTROLLER_OUTPUT(byte[] bytes, int offset)
		{
			return new Msg_nav_controller_output
			{
				nav_roll = bitconverter.ToSingle(bytes, offset + 0),
				nav_pitch = bitconverter.ToSingle(bytes, offset + 4),
				alt_error = bitconverter.ToSingle(bytes, offset + 8),
				aspd_error = bitconverter.ToSingle(bytes, offset + 12),
				xtrack_error = bitconverter.ToSingle(bytes, offset + 16),
				nav_bearing = bitconverter.ToInt16(bytes, offset + 20),
				target_bearing = bitconverter.ToInt16(bytes, offset + 22),
				wp_dist = bitconverter.ToUInt16(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST(byte[] bytes, int offset)
		{
			return new Msg_set_quad_swarm_led_roll_pitch_yaw_thrust
			{
				roll =  ByteArrayUtil.ToInt16(bytes, offset + 0, 4),
				pitch =  ByteArrayUtil.ToInt16(bytes, offset + 4, 4),
				yaw =  ByteArrayUtil.ToInt16(bytes, offset + 8, 4),
				thrust =  ByteArrayUtil.ToUInt16(bytes, offset + 12, 4),
				group = bytes[offset + 16],
				mode = bytes[offset + 17],
				led_red =  ByteArrayUtil.ToUInt8(bytes, offset + 18, 4),
				led_blue =  ByteArrayUtil.ToUInt8(bytes, offset + 22, 4),
				led_green =  ByteArrayUtil.ToUInt8(bytes, offset + 26, 4),
			};
		}

		internal static MavlinkMessage Deserialize_STATE_CORRECTION(byte[] bytes, int offset)
		{
			return new Msg_state_correction
			{
				xErr = bitconverter.ToSingle(bytes, offset + 0),
				yErr = bitconverter.ToSingle(bytes, offset + 4),
				zErr = bitconverter.ToSingle(bytes, offset + 8),
				rollErr = bitconverter.ToSingle(bytes, offset + 12),
				pitchErr = bitconverter.ToSingle(bytes, offset + 16),
				yawErr = bitconverter.ToSingle(bytes, offset + 20),
				vxErr = bitconverter.ToSingle(bytes, offset + 24),
				vyErr = bitconverter.ToSingle(bytes, offset + 28),
				vzErr = bitconverter.ToSingle(bytes, offset + 32),
			};
		}

		internal static MavlinkMessage Deserialize_REQUEST_DATA_STREAM(byte[] bytes, int offset)
		{
			return new Msg_request_data_stream
			{
				req_message_rate = bitconverter.ToUInt16(bytes, offset + 0),
				target_system = bytes[offset + 2],
				target_component = bytes[offset + 3],
				req_stream_id = bytes[offset + 4],
				start_stop = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_DATA_STREAM(byte[] bytes, int offset)
		{
			return new Msg_data_stream
			{
				message_rate = bitconverter.ToUInt16(bytes, offset + 0),
				stream_id = bytes[offset + 2],
				on_off = bytes[offset + 3],
			};
		}

		internal static MavlinkMessage Deserialize_MANUAL_CONTROL(byte[] bytes, int offset)
		{
			return new Msg_manual_control
			{
				x = bitconverter.ToInt16(bytes, offset + 0),
				y = bitconverter.ToInt16(bytes, offset + 2),
				z = bitconverter.ToInt16(bytes, offset + 4),
				r = bitconverter.ToInt16(bytes, offset + 6),
				buttons = bitconverter.ToUInt16(bytes, offset + 8),
				target = bytes[offset + 10],
			};
		}

		internal static MavlinkMessage Deserialize_RC_CHANNELS_OVERRIDE(byte[] bytes, int offset)
		{
			return new Msg_rc_channels_override
			{
				chan1_raw = bitconverter.ToUInt16(bytes, offset + 0),
				chan2_raw = bitconverter.ToUInt16(bytes, offset + 2),
				chan3_raw = bitconverter.ToUInt16(bytes, offset + 4),
				chan4_raw = bitconverter.ToUInt16(bytes, offset + 6),
				chan5_raw = bitconverter.ToUInt16(bytes, offset + 8),
				chan6_raw = bitconverter.ToUInt16(bytes, offset + 10),
				chan7_raw = bitconverter.ToUInt16(bytes, offset + 12),
				chan8_raw = bitconverter.ToUInt16(bytes, offset + 14),
				target_system = bytes[offset + 16],
				target_component = bytes[offset + 17],
			};
		}

		internal static MavlinkMessage Deserialize_VFR_HUD(byte[] bytes, int offset)
		{
			return new Msg_vfr_hud
			{
				airspeed = bitconverter.ToSingle(bytes, offset + 0),
				groundspeed = bitconverter.ToSingle(bytes, offset + 4),
				alt = bitconverter.ToSingle(bytes, offset + 8),
				climb = bitconverter.ToSingle(bytes, offset + 12),
				heading = bitconverter.ToInt16(bytes, offset + 16),
				throttle = bitconverter.ToUInt16(bytes, offset + 18),
			};
		}

		internal static MavlinkMessage Deserialize_COMMAND_LONG(byte[] bytes, int offset)
		{
			return new Msg_command_long
			{
				param1 = bitconverter.ToSingle(bytes, offset + 0),
				param2 = bitconverter.ToSingle(bytes, offset + 4),
				param3 = bitconverter.ToSingle(bytes, offset + 8),
				param4 = bitconverter.ToSingle(bytes, offset + 12),
				param5 = bitconverter.ToSingle(bytes, offset + 16),
				param6 = bitconverter.ToSingle(bytes, offset + 20),
				param7 = bitconverter.ToSingle(bytes, offset + 24),
				command = bitconverter.ToUInt16(bytes, offset + 28),
				target_system = bytes[offset + 30],
				target_component = bytes[offset + 31],
				confirmation = bytes[offset + 32],
			};
		}

		internal static MavlinkMessage Deserialize_COMMAND_ACK(byte[] bytes, int offset)
		{
			return new Msg_command_ack
			{
				command = bitconverter.ToUInt16(bytes, offset + 0),
				result = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT(byte[] bytes, int offset)
		{
			return new Msg_roll_pitch_yaw_rates_thrust_setpoint
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll_rate = bitconverter.ToSingle(bytes, offset + 4),
				pitch_rate = bitconverter.ToSingle(bytes, offset + 8),
				yaw_rate = bitconverter.ToSingle(bytes, offset + 12),
				thrust = bitconverter.ToSingle(bytes, offset + 16),
			};
		}

		internal static MavlinkMessage Deserialize_MANUAL_SETPOINT(byte[] bytes, int offset)
		{
			return new Msg_manual_setpoint
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 4),
				pitch = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				thrust = bitconverter.ToSingle(bytes, offset + 16),
				mode_switch = bytes[offset + 20],
				manual_override_switch = bytes[offset + 21],
			};
		}

		internal static MavlinkMessage Deserialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(byte[] bytes, int offset)
		{
			return new Msg_local_position_ned_system_global_offset
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 4),
				y = bitconverter.ToSingle(bytes, offset + 8),
				z = bitconverter.ToSingle(bytes, offset + 12),
				roll = bitconverter.ToSingle(bytes, offset + 16),
				pitch = bitconverter.ToSingle(bytes, offset + 20),
				yaw = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_HIL_STATE(byte[] bytes, int offset)
		{
			return new Msg_hil_state
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 8),
				pitch = bitconverter.ToSingle(bytes, offset + 12),
				yaw = bitconverter.ToSingle(bytes, offset + 16),
				rollspeed = bitconverter.ToSingle(bytes, offset + 20),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 24),
				yawspeed = bitconverter.ToSingle(bytes, offset + 28),
				lat = bitconverter.ToInt32(bytes, offset + 32),
				lon = bitconverter.ToInt32(bytes, offset + 36),
				alt = bitconverter.ToInt32(bytes, offset + 40),
				vx = bitconverter.ToInt16(bytes, offset + 44),
				vy = bitconverter.ToInt16(bytes, offset + 46),
				vz = bitconverter.ToInt16(bytes, offset + 48),
				xacc = bitconverter.ToInt16(bytes, offset + 50),
				yacc = bitconverter.ToInt16(bytes, offset + 52),
				zacc = bitconverter.ToInt16(bytes, offset + 54),
			};
		}

		internal static MavlinkMessage Deserialize_HIL_CONTROLS(byte[] bytes, int offset)
		{
			return new Msg_hil_controls
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				roll_ailerons = bitconverter.ToSingle(bytes, offset + 8),
				pitch_elevator = bitconverter.ToSingle(bytes, offset + 12),
				yaw_rudder = bitconverter.ToSingle(bytes, offset + 16),
				throttle = bitconverter.ToSingle(bytes, offset + 20),
				aux1 = bitconverter.ToSingle(bytes, offset + 24),
				aux2 = bitconverter.ToSingle(bytes, offset + 28),
				aux3 = bitconverter.ToSingle(bytes, offset + 32),
				aux4 = bitconverter.ToSingle(bytes, offset + 36),
				mode = bytes[offset + 40],
				nav_mode = bytes[offset + 41],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_RC_INPUTS_RAW(byte[] bytes, int offset)
		{
			return new Msg_hil_rc_inputs_raw
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				chan1_raw = bitconverter.ToUInt16(bytes, offset + 8),
				chan2_raw = bitconverter.ToUInt16(bytes, offset + 10),
				chan3_raw = bitconverter.ToUInt16(bytes, offset + 12),
				chan4_raw = bitconverter.ToUInt16(bytes, offset + 14),
				chan5_raw = bitconverter.ToUInt16(bytes, offset + 16),
				chan6_raw = bitconverter.ToUInt16(bytes, offset + 18),
				chan7_raw = bitconverter.ToUInt16(bytes, offset + 20),
				chan8_raw = bitconverter.ToUInt16(bytes, offset + 22),
				chan9_raw = bitconverter.ToUInt16(bytes, offset + 24),
				chan10_raw = bitconverter.ToUInt16(bytes, offset + 26),
				chan11_raw = bitconverter.ToUInt16(bytes, offset + 28),
				chan12_raw = bitconverter.ToUInt16(bytes, offset + 30),
				rssi = bytes[offset + 32],
			};
		}

		internal static MavlinkMessage Deserialize_OPTICAL_FLOW(byte[] bytes, int offset)
		{
			return new Msg_optical_flow
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				flow_comp_m_x = bitconverter.ToSingle(bytes, offset + 8),
				flow_comp_m_y = bitconverter.ToSingle(bytes, offset + 12),
				ground_distance = bitconverter.ToSingle(bytes, offset + 16),
				flow_x = bitconverter.ToInt16(bytes, offset + 20),
				flow_y = bitconverter.ToInt16(bytes, offset + 22),
				sensor_id = bytes[offset + 24],
				quality = bytes[offset + 25],
			};
		}

		internal static MavlinkMessage Deserialize_GLOBAL_VISION_POSITION_ESTIMATE(byte[] bytes, int offset)
		{
			return new Msg_global_vision_position_estimate
			{
				usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				roll = bitconverter.ToSingle(bytes, offset + 20),
				pitch = bitconverter.ToSingle(bytes, offset + 24),
				yaw = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_VISION_POSITION_ESTIMATE(byte[] bytes, int offset)
		{
			return new Msg_vision_position_estimate
			{
				usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				roll = bitconverter.ToSingle(bytes, offset + 20),
				pitch = bitconverter.ToSingle(bytes, offset + 24),
				yaw = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_VISION_SPEED_ESTIMATE(byte[] bytes, int offset)
		{
			return new Msg_vision_speed_estimate
			{
				usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
			};
		}

		internal static MavlinkMessage Deserialize_VICON_POSITION_ESTIMATE(byte[] bytes, int offset)
		{
			return new Msg_vicon_position_estimate
			{
				usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				roll = bitconverter.ToSingle(bytes, offset + 20),
				pitch = bitconverter.ToSingle(bytes, offset + 24),
				yaw = bitconverter.ToSingle(bytes, offset + 28),
			};
		}

		internal static MavlinkMessage Deserialize_HIGHRES_IMU(byte[] bytes, int offset)
		{
			return new Msg_highres_imu
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				xacc = bitconverter.ToSingle(bytes, offset + 8),
				yacc = bitconverter.ToSingle(bytes, offset + 12),
				zacc = bitconverter.ToSingle(bytes, offset + 16),
				xgyro = bitconverter.ToSingle(bytes, offset + 20),
				ygyro = bitconverter.ToSingle(bytes, offset + 24),
				zgyro = bitconverter.ToSingle(bytes, offset + 28),
				xmag = bitconverter.ToSingle(bytes, offset + 32),
				ymag = bitconverter.ToSingle(bytes, offset + 36),
				zmag = bitconverter.ToSingle(bytes, offset + 40),
				abs_pressure = bitconverter.ToSingle(bytes, offset + 44),
				diff_pressure = bitconverter.ToSingle(bytes, offset + 48),
				pressure_alt = bitconverter.ToSingle(bytes, offset + 52),
				temperature = bitconverter.ToSingle(bytes, offset + 56),
				fields_updated = bitconverter.ToUInt16(bytes, offset + 60),
			};
		}

		internal static MavlinkMessage Deserialize_OMNIDIRECTIONAL_FLOW(byte[] bytes, int offset)
		{
			return new Msg_omnidirectional_flow
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				front_distance_m = bitconverter.ToSingle(bytes, offset + 8),
				left =  ByteArrayUtil.ToInt16(bytes, offset + 12, 10),
				right =  ByteArrayUtil.ToInt16(bytes, offset + 22, 10),
				sensor_id = bytes[offset + 32],
				quality = bytes[offset + 33],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_SENSOR(byte[] bytes, int offset)
		{
			return new Msg_hil_sensor
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				xacc = bitconverter.ToSingle(bytes, offset + 8),
				yacc = bitconverter.ToSingle(bytes, offset + 12),
				zacc = bitconverter.ToSingle(bytes, offset + 16),
				xgyro = bitconverter.ToSingle(bytes, offset + 20),
				ygyro = bitconverter.ToSingle(bytes, offset + 24),
				zgyro = bitconverter.ToSingle(bytes, offset + 28),
				xmag = bitconverter.ToSingle(bytes, offset + 32),
				ymag = bitconverter.ToSingle(bytes, offset + 36),
				zmag = bitconverter.ToSingle(bytes, offset + 40),
				abs_pressure = bitconverter.ToSingle(bytes, offset + 44),
				diff_pressure = bitconverter.ToSingle(bytes, offset + 48),
				pressure_alt = bitconverter.ToSingle(bytes, offset + 52),
				temperature = bitconverter.ToSingle(bytes, offset + 56),
				fields_updated = bitconverter.ToUInt32(bytes, offset + 60),
			};
		}

		internal static MavlinkMessage Deserialize_SIM_STATE(byte[] bytes, int offset)
		{
			return new Msg_sim_state
			{
				q1 = bitconverter.ToSingle(bytes, offset + 0),
				q2 = bitconverter.ToSingle(bytes, offset + 4),
				q3 = bitconverter.ToSingle(bytes, offset + 8),
				q4 = bitconverter.ToSingle(bytes, offset + 12),
				roll = bitconverter.ToSingle(bytes, offset + 16),
				pitch = bitconverter.ToSingle(bytes, offset + 20),
				yaw = bitconverter.ToSingle(bytes, offset + 24),
				xacc = bitconverter.ToSingle(bytes, offset + 28),
				yacc = bitconverter.ToSingle(bytes, offset + 32),
				zacc = bitconverter.ToSingle(bytes, offset + 36),
				xgyro = bitconverter.ToSingle(bytes, offset + 40),
				ygyro = bitconverter.ToSingle(bytes, offset + 44),
				zgyro = bitconverter.ToSingle(bytes, offset + 48),
				lat = bitconverter.ToSingle(bytes, offset + 52),
				lon = bitconverter.ToSingle(bytes, offset + 56),
				alt = bitconverter.ToSingle(bytes, offset + 60),
				std_dev_horz = bitconverter.ToSingle(bytes, offset + 64),
				std_dev_vert = bitconverter.ToSingle(bytes, offset + 68),
				vn = bitconverter.ToSingle(bytes, offset + 72),
				ve = bitconverter.ToSingle(bytes, offset + 76),
				vd = bitconverter.ToSingle(bytes, offset + 80),
			};
		}

		internal static MavlinkMessage Deserialize_RADIO_STATUS(byte[] bytes, int offset)
		{
			return new Msg_radio_status
			{
				rxerrors = bitconverter.ToUInt16(bytes, offset + 0),
				@fixed = bitconverter.ToUInt16(bytes, offset + 2),
				rssi = bytes[offset + 4],
				remrssi = bytes[offset + 5],
				txbuf = bytes[offset + 6],
				noise = bytes[offset + 7],
				remnoise = bytes[offset + 8],
			};
		}

		internal static MavlinkMessage Deserialize_FILE_TRANSFER_START(byte[] bytes, int offset)
		{
			return new Msg_file_transfer_start
			{
				transfer_uid = bitconverter.ToUInt64(bytes, offset + 0),
				file_size = bitconverter.ToUInt32(bytes, offset + 8),
				dest_path =  ByteArrayUtil.ToChar(bytes, offset + 12, 240),
				direction = bytes[offset + 252],
				flags = bytes[offset + 253],
			};
		}

		internal static MavlinkMessage Deserialize_FILE_TRANSFER_DIR_LIST(byte[] bytes, int offset)
		{
			return new Msg_file_transfer_dir_list
			{
				transfer_uid = bitconverter.ToUInt64(bytes, offset + 0),
				dir_path =  ByteArrayUtil.ToChar(bytes, offset + 8, 240),
				flags = bytes[offset + 248],
			};
		}

		internal static MavlinkMessage Deserialize_FILE_TRANSFER_RES(byte[] bytes, int offset)
		{
			return new Msg_file_transfer_res
			{
				transfer_uid = bitconverter.ToUInt64(bytes, offset + 0),
				result = bytes[offset + 8],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_GPS(byte[] bytes, int offset)
		{
			return new Msg_hil_gps
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 8),
				lon = bitconverter.ToInt32(bytes, offset + 12),
				alt = bitconverter.ToInt32(bytes, offset + 16),
				eph = bitconverter.ToUInt16(bytes, offset + 20),
				epv = bitconverter.ToUInt16(bytes, offset + 22),
				vel = bitconverter.ToUInt16(bytes, offset + 24),
				vn = bitconverter.ToInt16(bytes, offset + 26),
				ve = bitconverter.ToInt16(bytes, offset + 28),
				vd = bitconverter.ToInt16(bytes, offset + 30),
				cog = bitconverter.ToUInt16(bytes, offset + 32),
				fix_type = bytes[offset + 34],
				satellites_visible = bytes[offset + 35],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_OPTICAL_FLOW(byte[] bytes, int offset)
		{
			return new Msg_hil_optical_flow
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				flow_comp_m_x = bitconverter.ToSingle(bytes, offset + 8),
				flow_comp_m_y = bitconverter.ToSingle(bytes, offset + 12),
				ground_distance = bitconverter.ToSingle(bytes, offset + 16),
				flow_x = bitconverter.ToInt16(bytes, offset + 20),
				flow_y = bitconverter.ToInt16(bytes, offset + 22),
				sensor_id = bytes[offset + 24],
				quality = bytes[offset + 25],
			};
		}

		internal static MavlinkMessage Deserialize_HIL_STATE_QUATERNION(byte[] bytes, int offset)
		{
			return new Msg_hil_state_quaternion
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				attitude_quaternion =  ByteArrayUtil.ToSingle(bytes, offset + 8, 4),
				rollspeed = bitconverter.ToSingle(bytes, offset + 12),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 16),
				yawspeed = bitconverter.ToSingle(bytes, offset + 20),
				lat = bitconverter.ToInt32(bytes, offset + 24),
				lon = bitconverter.ToInt32(bytes, offset + 28),
				alt = bitconverter.ToInt32(bytes, offset + 32),
				vx = bitconverter.ToInt16(bytes, offset + 36),
				vy = bitconverter.ToInt16(bytes, offset + 38),
				vz = bitconverter.ToInt16(bytes, offset + 40),
				ind_airspeed = bitconverter.ToUInt16(bytes, offset + 42),
				true_airspeed = bitconverter.ToUInt16(bytes, offset + 44),
				xacc = bitconverter.ToInt16(bytes, offset + 46),
				yacc = bitconverter.ToInt16(bytes, offset + 48),
				zacc = bitconverter.ToInt16(bytes, offset + 50),
			};
		}

		internal static MavlinkMessage Deserialize_BATTERY_STATUS(byte[] bytes, int offset)
		{
			return new Msg_battery_status
			{
				current_consumed = bitconverter.ToInt32(bytes, offset + 0),
				energy_consumed = bitconverter.ToInt32(bytes, offset + 4),
				voltage_cell_1 = bitconverter.ToUInt16(bytes, offset + 8),
				voltage_cell_2 = bitconverter.ToUInt16(bytes, offset + 10),
				voltage_cell_3 = bitconverter.ToUInt16(bytes, offset + 12),
				voltage_cell_4 = bitconverter.ToUInt16(bytes, offset + 14),
				voltage_cell_5 = bitconverter.ToUInt16(bytes, offset + 16),
				voltage_cell_6 = bitconverter.ToUInt16(bytes, offset + 18),
				current_battery = bitconverter.ToInt16(bytes, offset + 20),
				accu_id = bytes[offset + 22],
				battery_remaining = bitconverter.ToInt8(bytes, offset + 23),
			};
		}

		internal static MavlinkMessage Deserialize_SETPOINT_8DOF(byte[] bytes, int offset)
		{
			return new Msg_setpoint_8dof
			{
				val1 = bitconverter.ToSingle(bytes, offset + 0),
				val2 = bitconverter.ToSingle(bytes, offset + 4),
				val3 = bitconverter.ToSingle(bytes, offset + 8),
				val4 = bitconverter.ToSingle(bytes, offset + 12),
				val5 = bitconverter.ToSingle(bytes, offset + 16),
				val6 = bitconverter.ToSingle(bytes, offset + 20),
				val7 = bitconverter.ToSingle(bytes, offset + 24),
				val8 = bitconverter.ToSingle(bytes, offset + 28),
				target_system = bytes[offset + 32],
			};
		}

		internal static MavlinkMessage Deserialize_SETPOINT_6DOF(byte[] bytes, int offset)
		{
			return new Msg_setpoint_6dof
			{
				trans_x = bitconverter.ToSingle(bytes, offset + 0),
				trans_y = bitconverter.ToSingle(bytes, offset + 4),
				trans_z = bitconverter.ToSingle(bytes, offset + 8),
				rot_x = bitconverter.ToSingle(bytes, offset + 12),
				rot_y = bitconverter.ToSingle(bytes, offset + 16),
				rot_z = bitconverter.ToSingle(bytes, offset + 20),
				target_system = bytes[offset + 24],
			};
		}

		internal static MavlinkMessage Deserialize_MEMORY_VECT(byte[] bytes, int offset)
		{
			return new Msg_memory_vect
			{
				address = bitconverter.ToUInt16(bytes, offset + 0),
				ver = bytes[offset + 2],
				type = bytes[offset + 3],
				value =  ByteArrayUtil.ToInt8(bytes, offset + 4, 32),
			};
		}

		internal static MavlinkMessage Deserialize_DEBUG_VECT(byte[] bytes, int offset)
		{
			return new Msg_debug_vect
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				x = bitconverter.ToSingle(bytes, offset + 8),
				y = bitconverter.ToSingle(bytes, offset + 12),
				z = bitconverter.ToSingle(bytes, offset + 16),
				name =  ByteArrayUtil.ToChar(bytes, offset + 20, 10),
			};
		}

		internal static MavlinkMessage Deserialize_NAMED_VALUE_FLOAT(byte[] bytes, int offset)
		{
			return new Msg_named_value_float
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				value = bitconverter.ToSingle(bytes, offset + 4),
				name =  ByteArrayUtil.ToChar(bytes, offset + 8, 10),
			};
		}

		internal static MavlinkMessage Deserialize_NAMED_VALUE_INT(byte[] bytes, int offset)
		{
			return new Msg_named_value_int
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				value = bitconverter.ToInt32(bytes, offset + 4),
				name =  ByteArrayUtil.ToChar(bytes, offset + 8, 10),
			};
		}

		internal static MavlinkMessage Deserialize_STATUSTEXT(byte[] bytes, int offset)
		{
			return new Msg_statustext
			{
				severity = bytes[offset + 0],
				text =  ByteArrayUtil.ToChar(bytes, offset + 1, 50),
			};
		}

		internal static MavlinkMessage Deserialize_DEBUG(byte[] bytes, int offset)
		{
			return new Msg_debug
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				value = bitconverter.ToSingle(bytes, offset + 4),
				ind = bytes[offset + 8],
			};
		}

		internal static int Serialize_SENSOR_OFFSETS(this Msg_sensor_offsets msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.mag_declination, bytes, offset + 0);
			bitconverter.GetBytes(msg.raw_press, bytes, offset + 4);
			bitconverter.GetBytes(msg.raw_temp, bytes, offset + 8);
			bitconverter.GetBytes(msg.gyro_cal_x, bytes, offset + 12);
			bitconverter.GetBytes(msg.gyro_cal_y, bytes, offset + 16);
			bitconverter.GetBytes(msg.gyro_cal_z, bytes, offset + 20);
			bitconverter.GetBytes(msg.accel_cal_x, bytes, offset + 24);
			bitconverter.GetBytes(msg.accel_cal_y, bytes, offset + 28);
			bitconverter.GetBytes(msg.accel_cal_z, bytes, offset + 32);
			bitconverter.GetBytes(msg.mag_ofs_x, bytes, offset + 36);
			bitconverter.GetBytes(msg.mag_ofs_y, bytes, offset + 38);
			bitconverter.GetBytes(msg.mag_ofs_z, bytes, offset + 40);
			offset += 42;
			return 150;
		}

		internal static int Serialize_SET_MAG_OFFSETS(this Msg_set_mag_offsets msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.mag_ofs_x, bytes, offset + 0);
			bitconverter.GetBytes(msg.mag_ofs_y, bytes, offset + 2);
			bitconverter.GetBytes(msg.mag_ofs_z, bytes, offset + 4);
			bytes[offset + 6] = msg.target_system;
			bytes[offset + 7] = msg.target_component;
			offset += 8;
			return 151;
		}

		internal static int Serialize_MEMINFO(this Msg_meminfo msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.brkval, bytes, offset + 0);
			bitconverter.GetBytes(msg.freemem, bytes, offset + 2);
			offset += 4;
			return 152;
		}

		internal static int Serialize_AP_ADC(this Msg_ap_adc msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.adc1, bytes, offset + 0);
			bitconverter.GetBytes(msg.adc2, bytes, offset + 2);
			bitconverter.GetBytes(msg.adc3, bytes, offset + 4);
			bitconverter.GetBytes(msg.adc4, bytes, offset + 6);
			bitconverter.GetBytes(msg.adc5, bytes, offset + 8);
			bitconverter.GetBytes(msg.adc6, bytes, offset + 10);
			offset += 12;
			return 153;
		}

		internal static int Serialize_DIGICAM_CONFIGURE(this Msg_digicam_configure msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.extra_value, bytes, offset + 0);
			bitconverter.GetBytes(msg.shutter_speed, bytes, offset + 4);
			bytes[offset + 6] = msg.target_system;
			bytes[offset + 7] = msg.target_component;
			bytes[offset + 8] = msg.mode;
			bytes[offset + 9] = msg.aperture;
			bytes[offset + 10] = msg.iso;
			bytes[offset + 11] = msg.exposure_type;
			bytes[offset + 12] = msg.command_id;
			bytes[offset + 13] = msg.engine_cut_off;
			bytes[offset + 14] = msg.extra_param;
			offset += 15;
			return 154;
		}

		internal static int Serialize_DIGICAM_CONTROL(this Msg_digicam_control msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.extra_value, bytes, offset + 0);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			bytes[offset + 6] = msg.session;
			bytes[offset + 7] = msg.zoom_pos;
			bytes[offset + 8] = unchecked((byte)msg.zoom_step);
			bytes[offset + 9] = msg.focus_lock;
			bytes[offset + 10] = msg.shot;
			bytes[offset + 11] = msg.command_id;
			bytes[offset + 12] = msg.extra_param;
			offset += 13;
			return 155;
		}

		internal static int Serialize_MOUNT_CONFIGURE(this Msg_mount_configure msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.mount_mode;
			bytes[offset + 3] = msg.stab_roll;
			bytes[offset + 4] = msg.stab_pitch;
			bytes[offset + 5] = msg.stab_yaw;
			offset += 6;
			return 156;
		}

		internal static int Serialize_MOUNT_CONTROL(this Msg_mount_control msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.input_a, bytes, offset + 0);
			bitconverter.GetBytes(msg.input_b, bytes, offset + 4);
			bitconverter.GetBytes(msg.input_c, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			bytes[offset + 13] = msg.target_component;
			bytes[offset + 14] = msg.save_position;
			offset += 15;
			return 157;
		}

		internal static int Serialize_MOUNT_STATUS(this Msg_mount_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.pointing_a, bytes, offset + 0);
			bitconverter.GetBytes(msg.pointing_b, bytes, offset + 4);
			bitconverter.GetBytes(msg.pointing_c, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			bytes[offset + 13] = msg.target_component;
			offset += 14;
			return 158;
		}

		internal static int Serialize_FENCE_POINT(this Msg_fence_point msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.lat, bytes, offset + 0);
			bitconverter.GetBytes(msg.lng, bytes, offset + 4);
			bytes[offset + 8] = msg.target_system;
			bytes[offset + 9] = msg.target_component;
			bytes[offset + 10] = msg.idx;
			bytes[offset + 11] = msg.count;
			offset += 12;
			return 160;
		}

		internal static int Serialize_FENCE_FETCH_POINT(this Msg_fence_fetch_point msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.idx;
			offset += 3;
			return 161;
		}

		internal static int Serialize_FENCE_STATUS(this Msg_fence_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.breach_time, bytes, offset + 0);
			bitconverter.GetBytes(msg.breach_count, bytes, offset + 4);
			bytes[offset + 6] = msg.breach_status;
			bytes[offset + 7] = msg.breach_type;
			offset += 8;
			return 162;
		}

		internal static int Serialize_AHRS(this Msg_ahrs msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.omegaIx, bytes, offset + 0);
			bitconverter.GetBytes(msg.omegaIy, bytes, offset + 4);
			bitconverter.GetBytes(msg.omegaIz, bytes, offset + 8);
			bitconverter.GetBytes(msg.accel_weight, bytes, offset + 12);
			bitconverter.GetBytes(msg.renorm_val, bytes, offset + 16);
			bitconverter.GetBytes(msg.error_rp, bytes, offset + 20);
			bitconverter.GetBytes(msg.error_yaw, bytes, offset + 24);
			offset += 28;
			return 163;
		}

		internal static int Serialize_SIMSTATE(this Msg_simstate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.roll, bytes, offset + 0);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 4);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 8);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 12);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 16);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 20);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 24);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 28);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 32);
			bitconverter.GetBytes(msg.lat, bytes, offset + 36);
			bitconverter.GetBytes(msg.lng, bytes, offset + 40);
			offset += 44;
			return 164;
		}

		internal static int Serialize_HWSTATUS(this Msg_hwstatus msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.Vcc, bytes, offset + 0);
			bytes[offset + 2] = msg.I2Cerr;
			offset += 3;
			return 165;
		}

		internal static int Serialize_RADIO(this Msg_radio msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.rxerrors, bytes, offset + 0);
			bitconverter.GetBytes(msg.@fixed, bytes, offset + 2);
			bytes[offset + 4] = msg.rssi;
			bytes[offset + 5] = msg.remrssi;
			bytes[offset + 6] = msg.txbuf;
			bytes[offset + 7] = msg.noise;
			bytes[offset + 8] = msg.remnoise;
			offset += 9;
			return 166;
		}

		internal static int Serialize_LIMITS_STATUS(this Msg_limits_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.last_trigger, bytes, offset + 0);
			bitconverter.GetBytes(msg.last_action, bytes, offset + 4);
			bitconverter.GetBytes(msg.last_recovery, bytes, offset + 8);
			bitconverter.GetBytes(msg.last_clear, bytes, offset + 12);
			bitconverter.GetBytes(msg.breach_count, bytes, offset + 16);
			bytes[offset + 18] = msg.limits_state;
			bytes[offset + 19] = msg.mods_enabled;
			bytes[offset + 20] = msg.mods_required;
			bytes[offset + 21] = msg.mods_triggered;
			offset += 22;
			return 167;
		}

		internal static int Serialize_WIND(this Msg_wind msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.direction, bytes, offset + 0);
			bitconverter.GetBytes(msg.speed, bytes, offset + 4);
			bitconverter.GetBytes(msg.speed_z, bytes, offset + 8);
			offset += 12;
			return 168;
		}

		internal static int Serialize_DATA16(this Msg_data16 msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.type;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 16);
			offset += 18;
			return 169;
		}

		internal static int Serialize_DATA32(this Msg_data32 msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.type;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 32);
			offset += 34;
			return 170;
		}

		internal static int Serialize_DATA64(this Msg_data64 msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.type;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 64);
			offset += 66;
			return 171;
		}

		internal static int Serialize_DATA96(this Msg_data96 msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.type;
			bytes[offset + 1] = msg.len;
			ByteArrayUtil.ToByteArray(msg.data, bytes, offset + 2, 96);
			offset += 98;
			return 172;
		}

		internal static int Serialize_RANGEFINDER(this Msg_rangefinder msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.distance, bytes, offset + 0);
			bitconverter.GetBytes(msg.voltage, bytes, offset + 4);
			offset += 8;
			return 173;
		}

		internal static int Serialize_AIRSPEED_AUTOCAL(this Msg_airspeed_autocal msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.vx, bytes, offset + 0);
			bitconverter.GetBytes(msg.vy, bytes, offset + 4);
			bitconverter.GetBytes(msg.vz, bytes, offset + 8);
			bitconverter.GetBytes(msg.diff_pressure, bytes, offset + 12);
			bitconverter.GetBytes(msg.EAS2TAS, bytes, offset + 16);
			bitconverter.GetBytes(msg.ratio, bytes, offset + 20);
			bitconverter.GetBytes(msg.state_x, bytes, offset + 24);
			bitconverter.GetBytes(msg.state_y, bytes, offset + 28);
			bitconverter.GetBytes(msg.state_z, bytes, offset + 32);
			bitconverter.GetBytes(msg.Pax, bytes, offset + 36);
			bitconverter.GetBytes(msg.Pby, bytes, offset + 40);
			bitconverter.GetBytes(msg.Pcz, bytes, offset + 44);
			offset += 48;
			return 174;
		}

		internal static int Serialize_RALLY_POINT(this Msg_rally_point msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.lat, bytes, offset + 0);
			bitconverter.GetBytes(msg.lng, bytes, offset + 4);
			bitconverter.GetBytes(msg.alt, bytes, offset + 8);
			bitconverter.GetBytes(msg.break_alt, bytes, offset + 10);
			bitconverter.GetBytes(msg.land_dir, bytes, offset + 12);
			bytes[offset + 14] = msg.target_system;
			bytes[offset + 15] = msg.target_component;
			bytes[offset + 16] = msg.idx;
			bytes[offset + 17] = msg.count;
			bytes[offset + 18] = msg.flags;
			offset += 19;
			return 175;
		}

		internal static int Serialize_RALLY_FETCH_POINT(this Msg_rally_fetch_point msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.idx;
			offset += 3;
			return 176;
		}

		internal static int Serialize_HEARTBEAT(this Msg_heartbeat msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.custom_mode, bytes, offset + 0);
			bytes[offset + 4] = msg.type;
			bytes[offset + 5] = msg.autopilot;
			bytes[offset + 6] = msg.base_mode;
			bytes[offset + 7] = msg.system_status;
			bytes[offset + 8] = msg.mavlink_version;
			offset += 9;
			return 0;
		}

		internal static int Serialize_SYS_STATUS(this Msg_sys_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.onboard_control_sensors_present, bytes, offset + 0);
			bitconverter.GetBytes(msg.onboard_control_sensors_enabled, bytes, offset + 4);
			bitconverter.GetBytes(msg.onboard_control_sensors_health, bytes, offset + 8);
			bitconverter.GetBytes(msg.load, bytes, offset + 12);
			bitconverter.GetBytes(msg.voltage_battery, bytes, offset + 14);
			bitconverter.GetBytes(msg.current_battery, bytes, offset + 16);
			bitconverter.GetBytes(msg.drop_rate_comm, bytes, offset + 18);
			bitconverter.GetBytes(msg.errors_comm, bytes, offset + 20);
			bitconverter.GetBytes(msg.errors_count1, bytes, offset + 22);
			bitconverter.GetBytes(msg.errors_count2, bytes, offset + 24);
			bitconverter.GetBytes(msg.errors_count3, bytes, offset + 26);
			bitconverter.GetBytes(msg.errors_count4, bytes, offset + 28);
			bytes[offset + 30] = unchecked((byte)msg.battery_remaining);
			offset += 31;
			return 1;
		}

		internal static int Serialize_SYSTEM_TIME(this Msg_system_time msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_unix_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 8);
			offset += 12;
			return 2;
		}

		internal static int Serialize_PING(this Msg_ping msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.seq, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			bytes[offset + 13] = msg.target_component;
			offset += 14;
			return 4;
		}

		internal static int Serialize_CHANGE_OPERATOR_CONTROL(this Msg_change_operator_control msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.control_request;
			bytes[offset + 2] = msg.version;
			ByteArrayUtil.ToByteArray(msg.passkey, bytes, offset + 3, 25);
			offset += 28;
			return 5;
		}

		internal static int Serialize_CHANGE_OPERATOR_CONTROL_ACK(this Msg_change_operator_control_ack msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.gcs_system_id;
			bytes[offset + 1] = msg.control_request;
			bytes[offset + 2] = msg.ack;
			offset += 3;
			return 6;
		}

		internal static int Serialize_AUTH_KEY(this Msg_auth_key msg, byte[] bytes, ref int offset)
		{
			ByteArrayUtil.ToByteArray(msg.key, bytes, offset + 0, 32);
			offset += 32;
			return 7;
		}

		internal static int Serialize_SET_MODE(this Msg_set_mode msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.custom_mode, bytes, offset + 0);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.base_mode;
			offset += 6;
			return 11;
		}

		internal static int Serialize_PARAM_REQUEST_READ(this Msg_param_request_read msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param_index, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			ByteArrayUtil.ToByteArray(msg.param_id, bytes, offset + 4, 16);
			offset += 20;
			return 20;
		}

		internal static int Serialize_PARAM_REQUEST_LIST(this Msg_param_request_list msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 21;
		}

		internal static int Serialize_PARAM_VALUE(this Msg_param_value msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param_value, bytes, offset + 0);
			bitconverter.GetBytes(msg.param_count, bytes, offset + 4);
			bitconverter.GetBytes(msg.param_index, bytes, offset + 6);
			ByteArrayUtil.ToByteArray(msg.param_id, bytes, offset + 8, 16);
			bytes[offset + 24] = msg.param_type;
			offset += 25;
			return 22;
		}

		internal static int Serialize_PARAM_SET(this Msg_param_set msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param_value, bytes, offset + 0);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			ByteArrayUtil.ToByteArray(msg.param_id, bytes, offset + 6, 16);
			bytes[offset + 22] = msg.param_type;
			offset += 23;
			return 23;
		}

		internal static int Serialize_GPS_RAW_INT(this Msg_gps_raw_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 8);
			bitconverter.GetBytes(msg.lon, bytes, offset + 12);
			bitconverter.GetBytes(msg.alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.eph, bytes, offset + 20);
			bitconverter.GetBytes(msg.epv, bytes, offset + 22);
			bitconverter.GetBytes(msg.vel, bytes, offset + 24);
			bitconverter.GetBytes(msg.cog, bytes, offset + 26);
			bytes[offset + 28] = msg.fix_type;
			bytes[offset + 29] = msg.satellites_visible;
			offset += 30;
			return 24;
		}

		internal static int Serialize_GPS_STATUS(this Msg_gps_status msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.satellites_visible;
			ByteArrayUtil.ToByteArray(msg.satellite_prn, bytes, offset + 1, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_used, bytes, offset + 21, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_elevation, bytes, offset + 41, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_azimuth, bytes, offset + 61, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_snr, bytes, offset + 81, 20);
			offset += 101;
			return 25;
		}

		internal static int Serialize_SCALED_IMU(this Msg_scaled_imu msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 4);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 6);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 10);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 12);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 14);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 16);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 18);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 20);
			offset += 22;
			return 26;
		}

		internal static int Serialize_RAW_IMU(this Msg_raw_imu msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 10);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 12);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 14);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 16);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 18);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 20);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 22);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 24);
			offset += 26;
			return 27;
		}

		internal static int Serialize_RAW_PRESSURE(this Msg_raw_pressure msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.press_abs, bytes, offset + 8);
			bitconverter.GetBytes(msg.press_diff1, bytes, offset + 10);
			bitconverter.GetBytes(msg.press_diff2, bytes, offset + 12);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 14);
			offset += 16;
			return 28;
		}

		internal static int Serialize_SCALED_PRESSURE(this Msg_scaled_pressure msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.press_abs, bytes, offset + 4);
			bitconverter.GetBytes(msg.press_diff, bytes, offset + 8);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 12);
			offset += 14;
			return 29;
		}

		internal static int Serialize_ATTITUDE(this Msg_attitude msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 16);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 20);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 24);
			offset += 28;
			return 30;
		}

		internal static int Serialize_ATTITUDE_QUATERNION(this Msg_attitude_quaternion msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.q1, bytes, offset + 4);
			bitconverter.GetBytes(msg.q2, bytes, offset + 8);
			bitconverter.GetBytes(msg.q3, bytes, offset + 12);
			bitconverter.GetBytes(msg.q4, bytes, offset + 16);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 28);
			offset += 32;
			return 31;
		}

		internal static int Serialize_LOCAL_POSITION_NED(this Msg_local_position_ned msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 4);
			bitconverter.GetBytes(msg.y, bytes, offset + 8);
			bitconverter.GetBytes(msg.z, bytes, offset + 12);
			bitconverter.GetBytes(msg.vx, bytes, offset + 16);
			bitconverter.GetBytes(msg.vy, bytes, offset + 20);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			offset += 28;
			return 32;
		}

		internal static int Serialize_GLOBAL_POSITION_INT(this Msg_global_position_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 4);
			bitconverter.GetBytes(msg.lon, bytes, offset + 8);
			bitconverter.GetBytes(msg.alt, bytes, offset + 12);
			bitconverter.GetBytes(msg.relative_alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.vx, bytes, offset + 20);
			bitconverter.GetBytes(msg.vy, bytes, offset + 22);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			bitconverter.GetBytes(msg.hdg, bytes, offset + 26);
			offset += 28;
			return 33;
		}

		internal static int Serialize_RC_CHANNELS_SCALED(this Msg_rc_channels_scaled msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan1_scaled, bytes, offset + 4);
			bitconverter.GetBytes(msg.chan2_scaled, bytes, offset + 6);
			bitconverter.GetBytes(msg.chan3_scaled, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan4_scaled, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan5_scaled, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan6_scaled, bytes, offset + 14);
			bitconverter.GetBytes(msg.chan7_scaled, bytes, offset + 16);
			bitconverter.GetBytes(msg.chan8_scaled, bytes, offset + 18);
			bytes[offset + 20] = msg.port;
			bytes[offset + 21] = msg.rssi;
			offset += 22;
			return 34;
		}

		internal static int Serialize_RC_CHANNELS_RAW(this Msg_rc_channels_raw msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan1_raw, bytes, offset + 4);
			bitconverter.GetBytes(msg.chan2_raw, bytes, offset + 6);
			bitconverter.GetBytes(msg.chan3_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan4_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan5_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan6_raw, bytes, offset + 14);
			bitconverter.GetBytes(msg.chan7_raw, bytes, offset + 16);
			bitconverter.GetBytes(msg.chan8_raw, bytes, offset + 18);
			bytes[offset + 20] = msg.port;
			bytes[offset + 21] = msg.rssi;
			offset += 22;
			return 35;
		}

		internal static int Serialize_SERVO_OUTPUT_RAW(this Msg_servo_output_raw msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.servo1_raw, bytes, offset + 4);
			bitconverter.GetBytes(msg.servo2_raw, bytes, offset + 6);
			bitconverter.GetBytes(msg.servo3_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.servo4_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.servo5_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.servo6_raw, bytes, offset + 14);
			bitconverter.GetBytes(msg.servo7_raw, bytes, offset + 16);
			bitconverter.GetBytes(msg.servo8_raw, bytes, offset + 18);
			bytes[offset + 20] = msg.port;
			offset += 21;
			return 36;
		}

		internal static int Serialize_MISSION_REQUEST_PARTIAL_LIST(this Msg_mission_request_partial_list msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.start_index, bytes, offset + 0);
			bitconverter.GetBytes(msg.end_index, bytes, offset + 2);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			offset += 6;
			return 37;
		}

		internal static int Serialize_MISSION_WRITE_PARTIAL_LIST(this Msg_mission_write_partial_list msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.start_index, bytes, offset + 0);
			bitconverter.GetBytes(msg.end_index, bytes, offset + 2);
			bytes[offset + 4] = msg.target_system;
			bytes[offset + 5] = msg.target_component;
			offset += 6;
			return 38;
		}

		internal static int Serialize_MISSION_ITEM(this Msg_mission_item msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param1, bytes, offset + 0);
			bitconverter.GetBytes(msg.param2, bytes, offset + 4);
			bitconverter.GetBytes(msg.param3, bytes, offset + 8);
			bitconverter.GetBytes(msg.param4, bytes, offset + 12);
			bitconverter.GetBytes(msg.x, bytes, offset + 16);
			bitconverter.GetBytes(msg.y, bytes, offset + 20);
			bitconverter.GetBytes(msg.z, bytes, offset + 24);
			bitconverter.GetBytes(msg.seq, bytes, offset + 28);
			bitconverter.GetBytes(msg.command, bytes, offset + 30);
			bytes[offset + 32] = msg.target_system;
			bytes[offset + 33] = msg.target_component;
			bytes[offset + 34] = msg.frame;
			bytes[offset + 35] = msg.current;
			bytes[offset + 36] = msg.autocontinue;
			offset += 37;
			return 39;
		}

		internal static int Serialize_MISSION_REQUEST(this Msg_mission_request msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			offset += 4;
			return 40;
		}

		internal static int Serialize_MISSION_SET_CURRENT(this Msg_mission_set_current msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			offset += 4;
			return 41;
		}

		internal static int Serialize_MISSION_CURRENT(this Msg_mission_current msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			offset += 2;
			return 42;
		}

		internal static int Serialize_MISSION_REQUEST_LIST(this Msg_mission_request_list msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 43;
		}

		internal static int Serialize_MISSION_COUNT(this Msg_mission_count msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.count, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			offset += 4;
			return 44;
		}

		internal static int Serialize_MISSION_CLEAR_ALL(this Msg_mission_clear_all msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			offset += 2;
			return 45;
		}

		internal static int Serialize_MISSION_ITEM_REACHED(this Msg_mission_item_reached msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.seq, bytes, offset + 0);
			offset += 2;
			return 46;
		}

		internal static int Serialize_MISSION_ACK(this Msg_mission_ack msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.target_system;
			bytes[offset + 1] = msg.target_component;
			bytes[offset + 2] = msg.type;
			offset += 3;
			return 47;
		}

		internal static int Serialize_SET_GPS_GLOBAL_ORIGIN(this Msg_set_gps_global_origin msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			offset += 13;
			return 48;
		}

		internal static int Serialize_GPS_GLOBAL_ORIGIN(this Msg_gps_global_origin msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			offset += 12;
			return 49;
		}

		internal static int Serialize_SET_LOCAL_POSITION_SETPOINT(this Msg_set_local_position_setpoint msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.x, bytes, offset + 0);
			bitconverter.GetBytes(msg.y, bytes, offset + 4);
			bitconverter.GetBytes(msg.z, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bytes[offset + 16] = msg.target_system;
			bytes[offset + 17] = msg.target_component;
			bytes[offset + 18] = msg.coordinate_frame;
			offset += 19;
			return 50;
		}

		internal static int Serialize_LOCAL_POSITION_SETPOINT(this Msg_local_position_setpoint msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.x, bytes, offset + 0);
			bitconverter.GetBytes(msg.y, bytes, offset + 4);
			bitconverter.GetBytes(msg.z, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bytes[offset + 16] = msg.coordinate_frame;
			offset += 17;
			return 51;
		}

		internal static int Serialize_GLOBAL_POSITION_SETPOINT_INT(this Msg_global_position_setpoint_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bytes[offset + 14] = msg.coordinate_frame;
			offset += 15;
			return 52;
		}

		internal static int Serialize_SET_GLOBAL_POSITION_SETPOINT_INT(this Msg_set_global_position_setpoint_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bytes[offset + 14] = msg.coordinate_frame;
			offset += 15;
			return 53;
		}

		internal static int Serialize_SAFETY_SET_ALLOWED_AREA(this Msg_safety_set_allowed_area msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.p1x, bytes, offset + 0);
			bitconverter.GetBytes(msg.p1y, bytes, offset + 4);
			bitconverter.GetBytes(msg.p1z, bytes, offset + 8);
			bitconverter.GetBytes(msg.p2x, bytes, offset + 12);
			bitconverter.GetBytes(msg.p2y, bytes, offset + 16);
			bitconverter.GetBytes(msg.p2z, bytes, offset + 20);
			bytes[offset + 24] = msg.target_system;
			bytes[offset + 25] = msg.target_component;
			bytes[offset + 26] = msg.frame;
			offset += 27;
			return 54;
		}

		internal static int Serialize_SAFETY_ALLOWED_AREA(this Msg_safety_allowed_area msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.p1x, bytes, offset + 0);
			bitconverter.GetBytes(msg.p1y, bytes, offset + 4);
			bitconverter.GetBytes(msg.p1z, bytes, offset + 8);
			bitconverter.GetBytes(msg.p2x, bytes, offset + 12);
			bitconverter.GetBytes(msg.p2y, bytes, offset + 16);
			bitconverter.GetBytes(msg.p2z, bytes, offset + 20);
			bytes[offset + 24] = msg.frame;
			offset += 25;
			return 55;
		}

		internal static int Serialize_SET_ROLL_PITCH_YAW_THRUST(this Msg_set_roll_pitch_yaw_thrust msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.roll, bytes, offset + 0);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 4);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 8);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 12);
			bytes[offset + 16] = msg.target_system;
			bytes[offset + 17] = msg.target_component;
			offset += 18;
			return 56;
		}

		internal static int Serialize_SET_ROLL_PITCH_YAW_SPEED_THRUST(this Msg_set_roll_pitch_yaw_speed_thrust msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.roll_speed, bytes, offset + 0);
			bitconverter.GetBytes(msg.pitch_speed, bytes, offset + 4);
			bitconverter.GetBytes(msg.yaw_speed, bytes, offset + 8);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 12);
			bytes[offset + 16] = msg.target_system;
			bytes[offset + 17] = msg.target_component;
			offset += 18;
			return 57;
		}

		internal static int Serialize_ROLL_PITCH_YAW_THRUST_SETPOINT(this Msg_roll_pitch_yaw_thrust_setpoint msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 16);
			offset += 20;
			return 58;
		}

		internal static int Serialize_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT(this Msg_roll_pitch_yaw_speed_thrust_setpoint msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll_speed, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch_speed, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw_speed, bytes, offset + 12);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 16);
			offset += 20;
			return 59;
		}

		internal static int Serialize_SET_QUAD_MOTORS_SETPOINT(this Msg_set_quad_motors_setpoint msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.motor_front_nw, bytes, offset + 0);
			bitconverter.GetBytes(msg.motor_right_ne, bytes, offset + 2);
			bitconverter.GetBytes(msg.motor_back_se, bytes, offset + 4);
			bitconverter.GetBytes(msg.motor_left_sw, bytes, offset + 6);
			bytes[offset + 8] = msg.target_system;
			offset += 9;
			return 60;
		}

		internal static int Serialize_SET_QUAD_SWARM_ROLL_PITCH_YAW_THRUST(this Msg_set_quad_swarm_roll_pitch_yaw_thrust msg, byte[] bytes, ref int offset)
		{
			ByteArrayUtil.ToByteArray(msg.roll, bytes, offset + 0, 4);
			ByteArrayUtil.ToByteArray(msg.pitch, bytes, offset + 8, 4);
			ByteArrayUtil.ToByteArray(msg.yaw, bytes, offset + 16, 4);
			ByteArrayUtil.ToByteArray(msg.thrust, bytes, offset + 24, 4);
			bytes[offset + 32] = msg.group;
			bytes[offset + 33] = msg.mode;
			offset += 34;
			return 61;
		}

		internal static int Serialize_NAV_CONTROLLER_OUTPUT(this Msg_nav_controller_output msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.nav_roll, bytes, offset + 0);
			bitconverter.GetBytes(msg.nav_pitch, bytes, offset + 4);
			bitconverter.GetBytes(msg.alt_error, bytes, offset + 8);
			bitconverter.GetBytes(msg.aspd_error, bytes, offset + 12);
			bitconverter.GetBytes(msg.xtrack_error, bytes, offset + 16);
			bitconverter.GetBytes(msg.nav_bearing, bytes, offset + 20);
			bitconverter.GetBytes(msg.target_bearing, bytes, offset + 22);
			bitconverter.GetBytes(msg.wp_dist, bytes, offset + 24);
			offset += 26;
			return 62;
		}

		internal static int Serialize_SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST(this Msg_set_quad_swarm_led_roll_pitch_yaw_thrust msg, byte[] bytes, ref int offset)
		{
			ByteArrayUtil.ToByteArray(msg.roll, bytes, offset + 0, 4);
			ByteArrayUtil.ToByteArray(msg.pitch, bytes, offset + 8, 4);
			ByteArrayUtil.ToByteArray(msg.yaw, bytes, offset + 16, 4);
			ByteArrayUtil.ToByteArray(msg.thrust, bytes, offset + 24, 4);
			bytes[offset + 32] = msg.group;
			bytes[offset + 33] = msg.mode;
			ByteArrayUtil.ToByteArray(msg.led_red, bytes, offset + 34, 4);
			ByteArrayUtil.ToByteArray(msg.led_blue, bytes, offset + 38, 4);
			ByteArrayUtil.ToByteArray(msg.led_green, bytes, offset + 42, 4);
			offset += 46;
			return 63;
		}

		internal static int Serialize_STATE_CORRECTION(this Msg_state_correction msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.xErr, bytes, offset + 0);
			bitconverter.GetBytes(msg.yErr, bytes, offset + 4);
			bitconverter.GetBytes(msg.zErr, bytes, offset + 8);
			bitconverter.GetBytes(msg.rollErr, bytes, offset + 12);
			bitconverter.GetBytes(msg.pitchErr, bytes, offset + 16);
			bitconverter.GetBytes(msg.yawErr, bytes, offset + 20);
			bitconverter.GetBytes(msg.vxErr, bytes, offset + 24);
			bitconverter.GetBytes(msg.vyErr, bytes, offset + 28);
			bitconverter.GetBytes(msg.vzErr, bytes, offset + 32);
			offset += 36;
			return 64;
		}

		internal static int Serialize_REQUEST_DATA_STREAM(this Msg_request_data_stream msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.req_message_rate, bytes, offset + 0);
			bytes[offset + 2] = msg.target_system;
			bytes[offset + 3] = msg.target_component;
			bytes[offset + 4] = msg.req_stream_id;
			bytes[offset + 5] = msg.start_stop;
			offset += 6;
			return 66;
		}

		internal static int Serialize_DATA_STREAM(this Msg_data_stream msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.message_rate, bytes, offset + 0);
			bytes[offset + 2] = msg.stream_id;
			bytes[offset + 3] = msg.on_off;
			offset += 4;
			return 67;
		}

		internal static int Serialize_MANUAL_CONTROL(this Msg_manual_control msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.x, bytes, offset + 0);
			bitconverter.GetBytes(msg.y, bytes, offset + 2);
			bitconverter.GetBytes(msg.z, bytes, offset + 4);
			bitconverter.GetBytes(msg.r, bytes, offset + 6);
			bitconverter.GetBytes(msg.buttons, bytes, offset + 8);
			bytes[offset + 10] = msg.target;
			offset += 11;
			return 69;
		}

		internal static int Serialize_RC_CHANNELS_OVERRIDE(this Msg_rc_channels_override msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.chan1_raw, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan2_raw, bytes, offset + 2);
			bitconverter.GetBytes(msg.chan3_raw, bytes, offset + 4);
			bitconverter.GetBytes(msg.chan4_raw, bytes, offset + 6);
			bitconverter.GetBytes(msg.chan5_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan6_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan7_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan8_raw, bytes, offset + 14);
			bytes[offset + 16] = msg.target_system;
			bytes[offset + 17] = msg.target_component;
			offset += 18;
			return 70;
		}

		internal static int Serialize_VFR_HUD(this Msg_vfr_hud msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.airspeed, bytes, offset + 0);
			bitconverter.GetBytes(msg.groundspeed, bytes, offset + 4);
			bitconverter.GetBytes(msg.alt, bytes, offset + 8);
			bitconverter.GetBytes(msg.climb, bytes, offset + 12);
			bitconverter.GetBytes(msg.heading, bytes, offset + 16);
			bitconverter.GetBytes(msg.throttle, bytes, offset + 18);
			offset += 20;
			return 74;
		}

		internal static int Serialize_COMMAND_LONG(this Msg_command_long msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.param1, bytes, offset + 0);
			bitconverter.GetBytes(msg.param2, bytes, offset + 4);
			bitconverter.GetBytes(msg.param3, bytes, offset + 8);
			bitconverter.GetBytes(msg.param4, bytes, offset + 12);
			bitconverter.GetBytes(msg.param5, bytes, offset + 16);
			bitconverter.GetBytes(msg.param6, bytes, offset + 20);
			bitconverter.GetBytes(msg.param7, bytes, offset + 24);
			bitconverter.GetBytes(msg.command, bytes, offset + 28);
			bytes[offset + 30] = msg.target_system;
			bytes[offset + 31] = msg.target_component;
			bytes[offset + 32] = msg.confirmation;
			offset += 33;
			return 76;
		}

		internal static int Serialize_COMMAND_ACK(this Msg_command_ack msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.command, bytes, offset + 0);
			bytes[offset + 2] = msg.result;
			offset += 3;
			return 77;
		}

		internal static int Serialize_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT(this Msg_roll_pitch_yaw_rates_thrust_setpoint msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll_rate, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch_rate, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw_rate, bytes, offset + 12);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 16);
			offset += 20;
			return 80;
		}

		internal static int Serialize_MANUAL_SETPOINT(this Msg_manual_setpoint msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bitconverter.GetBytes(msg.thrust, bytes, offset + 16);
			bytes[offset + 20] = msg.mode_switch;
			bytes[offset + 21] = msg.manual_override_switch;
			offset += 22;
			return 81;
		}

		internal static int Serialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(this Msg_local_position_ned_system_global_offset msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 4);
			bitconverter.GetBytes(msg.y, bytes, offset + 8);
			bitconverter.GetBytes(msg.z, bytes, offset + 12);
			bitconverter.GetBytes(msg.roll, bytes, offset + 16);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 20);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 24);
			offset += 28;
			return 89;
		}

		internal static int Serialize_HIL_STATE(this Msg_hil_state msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 8);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 12);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 16);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 28);
			bitconverter.GetBytes(msg.lat, bytes, offset + 32);
			bitconverter.GetBytes(msg.lon, bytes, offset + 36);
			bitconverter.GetBytes(msg.alt, bytes, offset + 40);
			bitconverter.GetBytes(msg.vx, bytes, offset + 44);
			bitconverter.GetBytes(msg.vy, bytes, offset + 46);
			bitconverter.GetBytes(msg.vz, bytes, offset + 48);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 50);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 52);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 54);
			offset += 56;
			return 90;
		}

		internal static int Serialize_HIL_CONTROLS(this Msg_hil_controls msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll_ailerons, bytes, offset + 8);
			bitconverter.GetBytes(msg.pitch_elevator, bytes, offset + 12);
			bitconverter.GetBytes(msg.yaw_rudder, bytes, offset + 16);
			bitconverter.GetBytes(msg.throttle, bytes, offset + 20);
			bitconverter.GetBytes(msg.aux1, bytes, offset + 24);
			bitconverter.GetBytes(msg.aux2, bytes, offset + 28);
			bitconverter.GetBytes(msg.aux3, bytes, offset + 32);
			bitconverter.GetBytes(msg.aux4, bytes, offset + 36);
			bytes[offset + 40] = msg.mode;
			bytes[offset + 41] = msg.nav_mode;
			offset += 42;
			return 91;
		}

		internal static int Serialize_HIL_RC_INPUTS_RAW(this Msg_hil_rc_inputs_raw msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.chan1_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.chan2_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.chan3_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.chan4_raw, bytes, offset + 14);
			bitconverter.GetBytes(msg.chan5_raw, bytes, offset + 16);
			bitconverter.GetBytes(msg.chan6_raw, bytes, offset + 18);
			bitconverter.GetBytes(msg.chan7_raw, bytes, offset + 20);
			bitconverter.GetBytes(msg.chan8_raw, bytes, offset + 22);
			bitconverter.GetBytes(msg.chan9_raw, bytes, offset + 24);
			bitconverter.GetBytes(msg.chan10_raw, bytes, offset + 26);
			bitconverter.GetBytes(msg.chan11_raw, bytes, offset + 28);
			bitconverter.GetBytes(msg.chan12_raw, bytes, offset + 30);
			bytes[offset + 32] = msg.rssi;
			offset += 33;
			return 92;
		}

		internal static int Serialize_OPTICAL_FLOW(this Msg_optical_flow msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.flow_comp_m_x, bytes, offset + 8);
			bitconverter.GetBytes(msg.flow_comp_m_y, bytes, offset + 12);
			bitconverter.GetBytes(msg.ground_distance, bytes, offset + 16);
			bitconverter.GetBytes(msg.flow_x, bytes, offset + 20);
			bitconverter.GetBytes(msg.flow_y, bytes, offset + 22);
			bytes[offset + 24] = msg.sensor_id;
			bytes[offset + 25] = msg.quality;
			offset += 26;
			return 100;
		}

		internal static int Serialize_GLOBAL_VISION_POSITION_ESTIMATE(this Msg_global_vision_position_estimate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			bitconverter.GetBytes(msg.roll, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 24);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 28);
			offset += 32;
			return 101;
		}

		internal static int Serialize_VISION_POSITION_ESTIMATE(this Msg_vision_position_estimate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			bitconverter.GetBytes(msg.roll, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 24);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 28);
			offset += 32;
			return 102;
		}

		internal static int Serialize_VISION_SPEED_ESTIMATE(this Msg_vision_speed_estimate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			offset += 20;
			return 103;
		}

		internal static int Serialize_VICON_POSITION_ESTIMATE(this Msg_vicon_position_estimate msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			bitconverter.GetBytes(msg.roll, bytes, offset + 20);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 24);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 28);
			offset += 32;
			return 104;
		}

		internal static int Serialize_HIGHRES_IMU(this Msg_highres_imu msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 12);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 16);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 20);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 24);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 28);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 32);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 36);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 40);
			bitconverter.GetBytes(msg.abs_pressure, bytes, offset + 44);
			bitconverter.GetBytes(msg.diff_pressure, bytes, offset + 48);
			bitconverter.GetBytes(msg.pressure_alt, bytes, offset + 52);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 56);
			bitconverter.GetBytes(msg.fields_updated, bytes, offset + 60);
			offset += 62;
			return 105;
		}

		internal static int Serialize_OMNIDIRECTIONAL_FLOW(this Msg_omnidirectional_flow msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.front_distance_m, bytes, offset + 8);
			ByteArrayUtil.ToByteArray(msg.left, bytes, offset + 12, 10);
			ByteArrayUtil.ToByteArray(msg.right, bytes, offset + 32, 10);
			bytes[offset + 52] = msg.sensor_id;
			bytes[offset + 53] = msg.quality;
			offset += 54;
			return 106;
		}

		internal static int Serialize_HIL_SENSOR(this Msg_hil_sensor msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 8);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 12);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 16);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 20);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 24);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 28);
			bitconverter.GetBytes(msg.xmag, bytes, offset + 32);
			bitconverter.GetBytes(msg.ymag, bytes, offset + 36);
			bitconverter.GetBytes(msg.zmag, bytes, offset + 40);
			bitconverter.GetBytes(msg.abs_pressure, bytes, offset + 44);
			bitconverter.GetBytes(msg.diff_pressure, bytes, offset + 48);
			bitconverter.GetBytes(msg.pressure_alt, bytes, offset + 52);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 56);
			bitconverter.GetBytes(msg.fields_updated, bytes, offset + 60);
			offset += 64;
			return 107;
		}

		internal static int Serialize_SIM_STATE(this Msg_sim_state msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.q1, bytes, offset + 0);
			bitconverter.GetBytes(msg.q2, bytes, offset + 4);
			bitconverter.GetBytes(msg.q3, bytes, offset + 8);
			bitconverter.GetBytes(msg.q4, bytes, offset + 12);
			bitconverter.GetBytes(msg.roll, bytes, offset + 16);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 20);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 24);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 28);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 32);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 36);
			bitconverter.GetBytes(msg.xgyro, bytes, offset + 40);
			bitconverter.GetBytes(msg.ygyro, bytes, offset + 44);
			bitconverter.GetBytes(msg.zgyro, bytes, offset + 48);
			bitconverter.GetBytes(msg.lat, bytes, offset + 52);
			bitconverter.GetBytes(msg.lon, bytes, offset + 56);
			bitconverter.GetBytes(msg.alt, bytes, offset + 60);
			bitconverter.GetBytes(msg.std_dev_horz, bytes, offset + 64);
			bitconverter.GetBytes(msg.std_dev_vert, bytes, offset + 68);
			bitconverter.GetBytes(msg.vn, bytes, offset + 72);
			bitconverter.GetBytes(msg.ve, bytes, offset + 76);
			bitconverter.GetBytes(msg.vd, bytes, offset + 80);
			offset += 84;
			return 108;
		}

		internal static int Serialize_RADIO_STATUS(this Msg_radio_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.rxerrors, bytes, offset + 0);
			bitconverter.GetBytes(msg.@fixed, bytes, offset + 2);
			bytes[offset + 4] = msg.rssi;
			bytes[offset + 5] = msg.remrssi;
			bytes[offset + 6] = msg.txbuf;
			bytes[offset + 7] = msg.noise;
			bytes[offset + 8] = msg.remnoise;
			offset += 9;
			return 109;
		}

		internal static int Serialize_FILE_TRANSFER_START(this Msg_file_transfer_start msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.transfer_uid, bytes, offset + 0);
			bitconverter.GetBytes(msg.file_size, bytes, offset + 8);
			ByteArrayUtil.ToByteArray(msg.dest_path, bytes, offset + 12, 240);
			bytes[offset + 252] = msg.direction;
			bytes[offset + 253] = msg.flags;
			offset += 254;
			return 110;
		}

		internal static int Serialize_FILE_TRANSFER_DIR_LIST(this Msg_file_transfer_dir_list msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.transfer_uid, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.dir_path, bytes, offset + 8, 240);
			bytes[offset + 248] = msg.flags;
			offset += 249;
			return 111;
		}

		internal static int Serialize_FILE_TRANSFER_RES(this Msg_file_transfer_res msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.transfer_uid, bytes, offset + 0);
			bytes[offset + 8] = msg.result;
			offset += 9;
			return 112;
		}

		internal static int Serialize_HIL_GPS(this Msg_hil_gps msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 8);
			bitconverter.GetBytes(msg.lon, bytes, offset + 12);
			bitconverter.GetBytes(msg.alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.eph, bytes, offset + 20);
			bitconverter.GetBytes(msg.epv, bytes, offset + 22);
			bitconverter.GetBytes(msg.vel, bytes, offset + 24);
			bitconverter.GetBytes(msg.vn, bytes, offset + 26);
			bitconverter.GetBytes(msg.ve, bytes, offset + 28);
			bitconverter.GetBytes(msg.vd, bytes, offset + 30);
			bitconverter.GetBytes(msg.cog, bytes, offset + 32);
			bytes[offset + 34] = msg.fix_type;
			bytes[offset + 35] = msg.satellites_visible;
			offset += 36;
			return 113;
		}

		internal static int Serialize_HIL_OPTICAL_FLOW(this Msg_hil_optical_flow msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.flow_comp_m_x, bytes, offset + 8);
			bitconverter.GetBytes(msg.flow_comp_m_y, bytes, offset + 12);
			bitconverter.GetBytes(msg.ground_distance, bytes, offset + 16);
			bitconverter.GetBytes(msg.flow_x, bytes, offset + 20);
			bitconverter.GetBytes(msg.flow_y, bytes, offset + 22);
			bytes[offset + 24] = msg.sensor_id;
			bytes[offset + 25] = msg.quality;
			offset += 26;
			return 114;
		}

		internal static int Serialize_HIL_STATE_QUATERNION(this Msg_hil_state_quaternion msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.attitude_quaternion, bytes, offset + 8, 4);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 28);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 32);
			bitconverter.GetBytes(msg.lat, bytes, offset + 36);
			bitconverter.GetBytes(msg.lon, bytes, offset + 40);
			bitconverter.GetBytes(msg.alt, bytes, offset + 44);
			bitconverter.GetBytes(msg.vx, bytes, offset + 48);
			bitconverter.GetBytes(msg.vy, bytes, offset + 50);
			bitconverter.GetBytes(msg.vz, bytes, offset + 52);
			bitconverter.GetBytes(msg.ind_airspeed, bytes, offset + 54);
			bitconverter.GetBytes(msg.true_airspeed, bytes, offset + 56);
			bitconverter.GetBytes(msg.xacc, bytes, offset + 58);
			bitconverter.GetBytes(msg.yacc, bytes, offset + 60);
			bitconverter.GetBytes(msg.zacc, bytes, offset + 62);
			offset += 64;
			return 115;
		}

		internal static int Serialize_BATTERY_STATUS(this Msg_battery_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.current_consumed, bytes, offset + 0);
			bitconverter.GetBytes(msg.energy_consumed, bytes, offset + 4);
			bitconverter.GetBytes(msg.voltage_cell_1, bytes, offset + 8);
			bitconverter.GetBytes(msg.voltage_cell_2, bytes, offset + 10);
			bitconverter.GetBytes(msg.voltage_cell_3, bytes, offset + 12);
			bitconverter.GetBytes(msg.voltage_cell_4, bytes, offset + 14);
			bitconverter.GetBytes(msg.voltage_cell_5, bytes, offset + 16);
			bitconverter.GetBytes(msg.voltage_cell_6, bytes, offset + 18);
			bitconverter.GetBytes(msg.current_battery, bytes, offset + 20);
			bytes[offset + 22] = msg.accu_id;
			bytes[offset + 23] = unchecked((byte)msg.battery_remaining);
			offset += 24;
			return 147;
		}

		internal static int Serialize_SETPOINT_8DOF(this Msg_setpoint_8dof msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.val1, bytes, offset + 0);
			bitconverter.GetBytes(msg.val2, bytes, offset + 4);
			bitconverter.GetBytes(msg.val3, bytes, offset + 8);
			bitconverter.GetBytes(msg.val4, bytes, offset + 12);
			bitconverter.GetBytes(msg.val5, bytes, offset + 16);
			bitconverter.GetBytes(msg.val6, bytes, offset + 20);
			bitconverter.GetBytes(msg.val7, bytes, offset + 24);
			bitconverter.GetBytes(msg.val8, bytes, offset + 28);
			bytes[offset + 32] = msg.target_system;
			offset += 33;
			return 148;
		}

		internal static int Serialize_SETPOINT_6DOF(this Msg_setpoint_6dof msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.trans_x, bytes, offset + 0);
			bitconverter.GetBytes(msg.trans_y, bytes, offset + 4);
			bitconverter.GetBytes(msg.trans_z, bytes, offset + 8);
			bitconverter.GetBytes(msg.rot_x, bytes, offset + 12);
			bitconverter.GetBytes(msg.rot_y, bytes, offset + 16);
			bitconverter.GetBytes(msg.rot_z, bytes, offset + 20);
			bytes[offset + 24] = msg.target_system;
			offset += 25;
			return 149;
		}

		internal static int Serialize_MEMORY_VECT(this Msg_memory_vect msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.address, bytes, offset + 0);
			bytes[offset + 2] = msg.ver;
			bytes[offset + 3] = msg.type;
			ByteArrayUtil.ToByteArray(msg.value, bytes, offset + 4, 32);
			offset += 36;
			return 249;
		}

		internal static int Serialize_DEBUG_VECT(this Msg_debug_vect msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.x, bytes, offset + 8);
			bitconverter.GetBytes(msg.y, bytes, offset + 12);
			bitconverter.GetBytes(msg.z, bytes, offset + 16);
			ByteArrayUtil.ToByteArray(msg.name, bytes, offset + 20, 10);
			offset += 30;
			return 250;
		}

		internal static int Serialize_NAMED_VALUE_FLOAT(this Msg_named_value_float msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.value, bytes, offset + 4);
			ByteArrayUtil.ToByteArray(msg.name, bytes, offset + 8, 10);
			offset += 18;
			return 251;
		}

		internal static int Serialize_NAMED_VALUE_INT(this Msg_named_value_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.value, bytes, offset + 4);
			ByteArrayUtil.ToByteArray(msg.name, bytes, offset + 8, 10);
			offset += 18;
			return 252;
		}

		internal static int Serialize_STATUSTEXT(this Msg_statustext msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.severity;
			ByteArrayUtil.ToByteArray(msg.text, bytes, offset + 1, 50);
			offset += 51;
			return 253;
		}

		internal static int Serialize_DEBUG(this Msg_debug msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.value, bytes, offset + 4);
			bytes[offset + 8] = msg.ind;
			offset += 9;
			return 254;
		}
	}

}

